
hts221_lib_generate_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000349c  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  080035d8  080035d8  000135d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800368c  0800368c  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  0800368c  0800368c  0001368c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003694  08003694  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003694  08003694  00013694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003698  08003698  00013698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  0800369c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20000010  080036ac  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e0  080036ac  000200e0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a67d  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019c4  00000000  00000000  0002a6b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000928  00000000  00000000  0002c080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000888  00000000  00000000  0002c9a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001605e  00000000  00000000  0002d230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b197  00000000  00000000  0004328e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085575  00000000  00000000  0004e425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d399a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000257c  00000000  00000000  000d39f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	080035c0 	.word	0x080035c0

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	080035c0 	.word	0x080035c0

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295
 800018c:	f04f 30ff 	movne.w	r0, #4294967295
 8000190:	f000 b96e 	b.w	8000470 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9e08      	ldr	r6, [sp, #32]
 80001b2:	460d      	mov	r5, r1
 80001b4:	4604      	mov	r4, r0
 80001b6:	468e      	mov	lr, r1
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	f040 8083 	bne.w	80002c4 <__udivmoddi4+0x118>
 80001be:	428a      	cmp	r2, r1
 80001c0:	4617      	mov	r7, r2
 80001c2:	d947      	bls.n	8000254 <__udivmoddi4+0xa8>
 80001c4:	fab2 f382 	clz	r3, r2
 80001c8:	b14b      	cbz	r3, 80001de <__udivmoddi4+0x32>
 80001ca:	f1c3 0120 	rsb	r1, r3, #32
 80001ce:	fa05 fe03 	lsl.w	lr, r5, r3
 80001d2:	fa20 f101 	lsr.w	r1, r0, r1
 80001d6:	409f      	lsls	r7, r3
 80001d8:	ea41 0e0e 	orr.w	lr, r1, lr
 80001dc:	409c      	lsls	r4, r3
 80001de:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80001e2:	fbbe fcf8 	udiv	ip, lr, r8
 80001e6:	fa1f f987 	uxth.w	r9, r7
 80001ea:	fb08 e21c 	mls	r2, r8, ip, lr
 80001ee:	fb0c f009 	mul.w	r0, ip, r9
 80001f2:	0c21      	lsrs	r1, r4, #16
 80001f4:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80001f8:	4290      	cmp	r0, r2
 80001fa:	d90a      	bls.n	8000212 <__udivmoddi4+0x66>
 80001fc:	18ba      	adds	r2, r7, r2
 80001fe:	f10c 31ff 	add.w	r1, ip, #4294967295
 8000202:	f080 8118 	bcs.w	8000436 <__udivmoddi4+0x28a>
 8000206:	4290      	cmp	r0, r2
 8000208:	f240 8115 	bls.w	8000436 <__udivmoddi4+0x28a>
 800020c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000210:	443a      	add	r2, r7
 8000212:	1a12      	subs	r2, r2, r0
 8000214:	fbb2 f0f8 	udiv	r0, r2, r8
 8000218:	fb08 2210 	mls	r2, r8, r0, r2
 800021c:	fb00 f109 	mul.w	r1, r0, r9
 8000220:	b2a4      	uxth	r4, r4
 8000222:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000226:	42a1      	cmp	r1, r4
 8000228:	d909      	bls.n	800023e <__udivmoddi4+0x92>
 800022a:	193c      	adds	r4, r7, r4
 800022c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000230:	f080 8103 	bcs.w	800043a <__udivmoddi4+0x28e>
 8000234:	42a1      	cmp	r1, r4
 8000236:	f240 8100 	bls.w	800043a <__udivmoddi4+0x28e>
 800023a:	3802      	subs	r0, #2
 800023c:	443c      	add	r4, r7
 800023e:	1a64      	subs	r4, r4, r1
 8000240:	2100      	movs	r1, #0
 8000242:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa4>
 8000248:	2200      	movs	r2, #0
 800024a:	40dc      	lsrs	r4, r3
 800024c:	e9c6 4200 	strd	r4, r2, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	b902      	cbnz	r2, 8000258 <__udivmoddi4+0xac>
 8000256:	deff      	udf	#255	; 0xff
 8000258:	fab2 f382 	clz	r3, r2
 800025c:	2b00      	cmp	r3, #0
 800025e:	d14f      	bne.n	8000300 <__udivmoddi4+0x154>
 8000260:	1a8d      	subs	r5, r1, r2
 8000262:	2101      	movs	r1, #1
 8000264:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000268:	fa1f f882 	uxth.w	r8, r2
 800026c:	fbb5 fcfe 	udiv	ip, r5, lr
 8000270:	fb0e 551c 	mls	r5, lr, ip, r5
 8000274:	fb08 f00c 	mul.w	r0, r8, ip
 8000278:	0c22      	lsrs	r2, r4, #16
 800027a:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 800027e:	42a8      	cmp	r0, r5
 8000280:	d907      	bls.n	8000292 <__udivmoddi4+0xe6>
 8000282:	197d      	adds	r5, r7, r5
 8000284:	f10c 32ff 	add.w	r2, ip, #4294967295
 8000288:	d202      	bcs.n	8000290 <__udivmoddi4+0xe4>
 800028a:	42a8      	cmp	r0, r5
 800028c:	f200 80e9 	bhi.w	8000462 <__udivmoddi4+0x2b6>
 8000290:	4694      	mov	ip, r2
 8000292:	1a2d      	subs	r5, r5, r0
 8000294:	fbb5 f0fe 	udiv	r0, r5, lr
 8000298:	fb0e 5510 	mls	r5, lr, r0, r5
 800029c:	fb08 f800 	mul.w	r8, r8, r0
 80002a0:	b2a4      	uxth	r4, r4
 80002a2:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002a6:	45a0      	cmp	r8, r4
 80002a8:	d907      	bls.n	80002ba <__udivmoddi4+0x10e>
 80002aa:	193c      	adds	r4, r7, r4
 80002ac:	f100 32ff 	add.w	r2, r0, #4294967295
 80002b0:	d202      	bcs.n	80002b8 <__udivmoddi4+0x10c>
 80002b2:	45a0      	cmp	r8, r4
 80002b4:	f200 80d9 	bhi.w	800046a <__udivmoddi4+0x2be>
 80002b8:	4610      	mov	r0, r2
 80002ba:	eba4 0408 	sub.w	r4, r4, r8
 80002be:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80002c2:	e7c0      	b.n	8000246 <__udivmoddi4+0x9a>
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d908      	bls.n	80002da <__udivmoddi4+0x12e>
 80002c8:	2e00      	cmp	r6, #0
 80002ca:	f000 80b1 	beq.w	8000430 <__udivmoddi4+0x284>
 80002ce:	2100      	movs	r1, #0
 80002d0:	e9c6 0500 	strd	r0, r5, [r6]
 80002d4:	4608      	mov	r0, r1
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f183 	clz	r1, r3
 80002de:	2900      	cmp	r1, #0
 80002e0:	d14b      	bne.n	800037a <__udivmoddi4+0x1ce>
 80002e2:	42ab      	cmp	r3, r5
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0x140>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80b9 	bhi.w	800045e <__udivmoddi4+0x2b2>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb65 0303 	sbc.w	r3, r5, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	469e      	mov	lr, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0aa      	beq.n	8000250 <__udivmoddi4+0xa4>
 80002fa:	e9c6 4e00 	strd	r4, lr, [r6]
 80002fe:	e7a7      	b.n	8000250 <__udivmoddi4+0xa4>
 8000300:	409f      	lsls	r7, r3
 8000302:	f1c3 0220 	rsb	r2, r3, #32
 8000306:	40d1      	lsrs	r1, r2
 8000308:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800030c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000310:	fa1f f887 	uxth.w	r8, r7
 8000314:	fb0e 1110 	mls	r1, lr, r0, r1
 8000318:	fa24 f202 	lsr.w	r2, r4, r2
 800031c:	409d      	lsls	r5, r3
 800031e:	fb00 fc08 	mul.w	ip, r0, r8
 8000322:	432a      	orrs	r2, r5
 8000324:	0c15      	lsrs	r5, r2, #16
 8000326:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800032a:	45ac      	cmp	ip, r5
 800032c:	fa04 f403 	lsl.w	r4, r4, r3
 8000330:	d909      	bls.n	8000346 <__udivmoddi4+0x19a>
 8000332:	197d      	adds	r5, r7, r5
 8000334:	f100 31ff 	add.w	r1, r0, #4294967295
 8000338:	f080 808f 	bcs.w	800045a <__udivmoddi4+0x2ae>
 800033c:	45ac      	cmp	ip, r5
 800033e:	f240 808c 	bls.w	800045a <__udivmoddi4+0x2ae>
 8000342:	3802      	subs	r0, #2
 8000344:	443d      	add	r5, r7
 8000346:	eba5 050c 	sub.w	r5, r5, ip
 800034a:	fbb5 f1fe 	udiv	r1, r5, lr
 800034e:	fb0e 5c11 	mls	ip, lr, r1, r5
 8000352:	fb01 f908 	mul.w	r9, r1, r8
 8000356:	b295      	uxth	r5, r2
 8000358:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800035c:	45a9      	cmp	r9, r5
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x1c4>
 8000360:	197d      	adds	r5, r7, r5
 8000362:	f101 32ff 	add.w	r2, r1, #4294967295
 8000366:	d274      	bcs.n	8000452 <__udivmoddi4+0x2a6>
 8000368:	45a9      	cmp	r9, r5
 800036a:	d972      	bls.n	8000452 <__udivmoddi4+0x2a6>
 800036c:	3902      	subs	r1, #2
 800036e:	443d      	add	r5, r7
 8000370:	eba5 0509 	sub.w	r5, r5, r9
 8000374:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000378:	e778      	b.n	800026c <__udivmoddi4+0xc0>
 800037a:	f1c1 0720 	rsb	r7, r1, #32
 800037e:	408b      	lsls	r3, r1
 8000380:	fa22 fc07 	lsr.w	ip, r2, r7
 8000384:	ea4c 0c03 	orr.w	ip, ip, r3
 8000388:	fa25 f407 	lsr.w	r4, r5, r7
 800038c:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000390:	fbb4 f9fe 	udiv	r9, r4, lr
 8000394:	fa1f f88c 	uxth.w	r8, ip
 8000398:	fb0e 4419 	mls	r4, lr, r9, r4
 800039c:	fa20 f307 	lsr.w	r3, r0, r7
 80003a0:	fb09 fa08 	mul.w	sl, r9, r8
 80003a4:	408d      	lsls	r5, r1
 80003a6:	431d      	orrs	r5, r3
 80003a8:	0c2b      	lsrs	r3, r5, #16
 80003aa:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003ae:	45a2      	cmp	sl, r4
 80003b0:	fa02 f201 	lsl.w	r2, r2, r1
 80003b4:	fa00 f301 	lsl.w	r3, r0, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0x222>
 80003ba:	eb1c 0404 	adds.w	r4, ip, r4
 80003be:	f109 30ff 	add.w	r0, r9, #4294967295
 80003c2:	d248      	bcs.n	8000456 <__udivmoddi4+0x2aa>
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d946      	bls.n	8000456 <__udivmoddi4+0x2aa>
 80003c8:	f1a9 0902 	sub.w	r9, r9, #2
 80003cc:	4464      	add	r4, ip
 80003ce:	eba4 040a 	sub.w	r4, r4, sl
 80003d2:	fbb4 f0fe 	udiv	r0, r4, lr
 80003d6:	fb0e 4410 	mls	r4, lr, r0, r4
 80003da:	fb00 fa08 	mul.w	sl, r0, r8
 80003de:	b2ad      	uxth	r5, r5
 80003e0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003e4:	45a2      	cmp	sl, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x24e>
 80003e8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ec:	f100 35ff 	add.w	r5, r0, #4294967295
 80003f0:	d22d      	bcs.n	800044e <__udivmoddi4+0x2a2>
 80003f2:	45a2      	cmp	sl, r4
 80003f4:	d92b      	bls.n	800044e <__udivmoddi4+0x2a2>
 80003f6:	3802      	subs	r0, #2
 80003f8:	4464      	add	r4, ip
 80003fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000402:	eba4 040a 	sub.w	r4, r4, sl
 8000406:	454c      	cmp	r4, r9
 8000408:	46c6      	mov	lr, r8
 800040a:	464d      	mov	r5, r9
 800040c:	d319      	bcc.n	8000442 <__udivmoddi4+0x296>
 800040e:	d016      	beq.n	800043e <__udivmoddi4+0x292>
 8000410:	b15e      	cbz	r6, 800042a <__udivmoddi4+0x27e>
 8000412:	ebb3 020e 	subs.w	r2, r3, lr
 8000416:	eb64 0405 	sbc.w	r4, r4, r5
 800041a:	fa04 f707 	lsl.w	r7, r4, r7
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431f      	orrs	r7, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c6 7400 	strd	r7, r4, [r6]
 800042a:	2100      	movs	r1, #0
 800042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000430:	4631      	mov	r1, r6
 8000432:	4630      	mov	r0, r6
 8000434:	e70c      	b.n	8000250 <__udivmoddi4+0xa4>
 8000436:	468c      	mov	ip, r1
 8000438:	e6eb      	b.n	8000212 <__udivmoddi4+0x66>
 800043a:	4610      	mov	r0, r2
 800043c:	e6ff      	b.n	800023e <__udivmoddi4+0x92>
 800043e:	4543      	cmp	r3, r8
 8000440:	d2e6      	bcs.n	8000410 <__udivmoddi4+0x264>
 8000442:	ebb8 0e02 	subs.w	lr, r8, r2
 8000446:	eb69 050c 	sbc.w	r5, r9, ip
 800044a:	3801      	subs	r0, #1
 800044c:	e7e0      	b.n	8000410 <__udivmoddi4+0x264>
 800044e:	4628      	mov	r0, r5
 8000450:	e7d3      	b.n	80003fa <__udivmoddi4+0x24e>
 8000452:	4611      	mov	r1, r2
 8000454:	e78c      	b.n	8000370 <__udivmoddi4+0x1c4>
 8000456:	4681      	mov	r9, r0
 8000458:	e7b9      	b.n	80003ce <__udivmoddi4+0x222>
 800045a:	4608      	mov	r0, r1
 800045c:	e773      	b.n	8000346 <__udivmoddi4+0x19a>
 800045e:	4608      	mov	r0, r1
 8000460:	e749      	b.n	80002f6 <__udivmoddi4+0x14a>
 8000462:	f1ac 0c02 	sub.w	ip, ip, #2
 8000466:	443d      	add	r5, r7
 8000468:	e713      	b.n	8000292 <__udivmoddi4+0xe6>
 800046a:	3802      	subs	r0, #2
 800046c:	443c      	add	r4, r7
 800046e:	e724      	b.n	80002ba <__udivmoddi4+0x10e>

08000470 <__aeabi_idiv0>:
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop

08000474 <HTS221_Write_i2c>:
#include "HAL_I2C_anklabs.h"

I2C_HandleTypeDef hi2c1;
uint16_t wait = 100;

void HTS221_Write_i2c(uint8_t Dev_address, uint8_t R_Address, uint8_t Data){
 8000474:	b580      	push	{r7, lr}
 8000476:	b086      	sub	sp, #24
 8000478:	af02      	add	r7, sp, #8
 800047a:	4603      	mov	r3, r0
 800047c:	71fb      	strb	r3, [r7, #7]
 800047e:	460b      	mov	r3, r1
 8000480:	71bb      	strb	r3, [r7, #6]
 8000482:	4613      	mov	r3, r2
 8000484:	717b      	strb	r3, [r7, #5]
	uint8_t buff[2] = {0,0};
 8000486:	2300      	movs	r3, #0
 8000488:	81bb      	strh	r3, [r7, #12]

	buff[0] = (R_Address | 0x80);
 800048a:	79bb      	ldrb	r3, [r7, #6]
 800048c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000490:	b2db      	uxtb	r3, r3
 8000492:	733b      	strb	r3, [r7, #12]
	buff[1] = Data;
 8000494:	797b      	ldrb	r3, [r7, #5]
 8000496:	737b      	strb	r3, [r7, #13]

	HAL_I2C_Master_Transmit(&hi2c1, Dev_address, buff, 2, wait);
 8000498:	79fb      	ldrb	r3, [r7, #7]
 800049a:	b299      	uxth	r1, r3
 800049c:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <HTS221_Write_i2c+0x44>)
 800049e:	881b      	ldrh	r3, [r3, #0]
 80004a0:	f107 020c 	add.w	r2, r7, #12
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	2302      	movs	r3, #2
 80004a8:	4804      	ldr	r0, [pc, #16]	; (80004bc <HTS221_Write_i2c+0x48>)
 80004aa:	f001 fa5d 	bl	8001968 <HAL_I2C_Master_Transmit>
}
 80004ae:	bf00      	nop
 80004b0:	3710      	adds	r7, #16
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	20000000 	.word	0x20000000
 80004bc:	2000002c 	.word	0x2000002c

080004c0 <HTS221_Read_i2c>:

uint8_t HTS221_Read_i2c(uint8_t Dev_address, uint8_t Dev_addressR, uint8_t R_Address){
 80004c0:	b580      	push	{r7, lr}
 80004c2:	b086      	sub	sp, #24
 80004c4:	af02      	add	r7, sp, #8
 80004c6:	4603      	mov	r3, r0
 80004c8:	71fb      	strb	r3, [r7, #7]
 80004ca:	460b      	mov	r3, r1
 80004cc:	71bb      	strb	r3, [r7, #6]
 80004ce:	4613      	mov	r3, r2
 80004d0:	717b      	strb	r3, [r7, #5]
	uint8_t temp = 5;
 80004d2:	2305      	movs	r3, #5
 80004d4:	73fb      	strb	r3, [r7, #15]

	HAL_I2C_Master_Transmit(&hi2c1, Dev_address, &R_Address, 1, wait);
 80004d6:	79fb      	ldrb	r3, [r7, #7]
 80004d8:	b299      	uxth	r1, r3
 80004da:	4b0c      	ldr	r3, [pc, #48]	; (800050c <HTS221_Read_i2c+0x4c>)
 80004dc:	881b      	ldrh	r3, [r3, #0]
 80004de:	1d7a      	adds	r2, r7, #5
 80004e0:	9300      	str	r3, [sp, #0]
 80004e2:	2301      	movs	r3, #1
 80004e4:	480a      	ldr	r0, [pc, #40]	; (8000510 <HTS221_Read_i2c+0x50>)
 80004e6:	f001 fa3f 	bl	8001968 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, Dev_addressR, &temp, 1, wait);
 80004ea:	79bb      	ldrb	r3, [r7, #6]
 80004ec:	b299      	uxth	r1, r3
 80004ee:	4b07      	ldr	r3, [pc, #28]	; (800050c <HTS221_Read_i2c+0x4c>)
 80004f0:	881b      	ldrh	r3, [r3, #0]
 80004f2:	f107 020f 	add.w	r2, r7, #15
 80004f6:	9300      	str	r3, [sp, #0]
 80004f8:	2301      	movs	r3, #1
 80004fa:	4805      	ldr	r0, [pc, #20]	; (8000510 <HTS221_Read_i2c+0x50>)
 80004fc:	f001 fb32 	bl	8001b64 <HAL_I2C_Master_Receive>
	return temp;
 8000500:	7bfb      	ldrb	r3, [r7, #15]
}
 8000502:	4618      	mov	r0, r3
 8000504:	3710      	adds	r7, #16
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	20000000 	.word	0x20000000
 8000510:	2000002c 	.word	0x2000002c

08000514 <HTS221_Read_multi_i2c>:

uint8_t HTS221_Read_multi_i2c(uint8_t Dev_address, uint8_t Dev_addressR, uint8_t R_Address, uint8_t size){
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	af02      	add	r7, sp, #8
 800051a:	4604      	mov	r4, r0
 800051c:	4608      	mov	r0, r1
 800051e:	4611      	mov	r1, r2
 8000520:	461a      	mov	r2, r3
 8000522:	4623      	mov	r3, r4
 8000524:	71fb      	strb	r3, [r7, #7]
 8000526:	4603      	mov	r3, r0
 8000528:	71bb      	strb	r3, [r7, #6]
 800052a:	460b      	mov	r3, r1
 800052c:	717b      	strb	r3, [r7, #5]
 800052e:	4613      	mov	r3, r2
 8000530:	713b      	strb	r3, [r7, #4]
 8000532:	466b      	mov	r3, sp
 8000534:	461d      	mov	r5, r3
	R_Address |= 0x80;
 8000536:	797b      	ldrb	r3, [r7, #5]
 8000538:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800053c:	b2db      	uxtb	r3, r3
 800053e:	717b      	strb	r3, [r7, #5]
	uint8_t buff_arry[size];
 8000540:	793c      	ldrb	r4, [r7, #4]
 8000542:	4623      	mov	r3, r4
 8000544:	3b01      	subs	r3, #1
 8000546:	613b      	str	r3, [r7, #16]
 8000548:	b2e0      	uxtb	r0, r4
 800054a:	f04f 0100 	mov.w	r1, #0
 800054e:	f04f 0200 	mov.w	r2, #0
 8000552:	f04f 0300 	mov.w	r3, #0
 8000556:	00cb      	lsls	r3, r1, #3
 8000558:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800055c:	00c2      	lsls	r2, r0, #3
 800055e:	b2e0      	uxtb	r0, r4
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	f04f 0200 	mov.w	r2, #0
 8000568:	f04f 0300 	mov.w	r3, #0
 800056c:	00cb      	lsls	r3, r1, #3
 800056e:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8000572:	00c2      	lsls	r2, r0, #3
 8000574:	4623      	mov	r3, r4
 8000576:	3307      	adds	r3, #7
 8000578:	08db      	lsrs	r3, r3, #3
 800057a:	00db      	lsls	r3, r3, #3
 800057c:	ebad 0d03 	sub.w	sp, sp, r3
 8000580:	ab02      	add	r3, sp, #8
 8000582:	3300      	adds	r3, #0
 8000584:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, Dev_address, &R_Address, 1, wait);
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	b299      	uxth	r1, r3
 800058a:	4b16      	ldr	r3, [pc, #88]	; (80005e4 <HTS221_Read_multi_i2c+0xd0>)
 800058c:	881b      	ldrh	r3, [r3, #0]
 800058e:	1d7a      	adds	r2, r7, #5
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2301      	movs	r3, #1
 8000594:	4814      	ldr	r0, [pc, #80]	; (80005e8 <HTS221_Read_multi_i2c+0xd4>)
 8000596:	f001 f9e7 	bl	8001968 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, Dev_addressR, buff_arry, size, wait);
 800059a:	79bb      	ldrb	r3, [r7, #6]
 800059c:	b299      	uxth	r1, r3
 800059e:	68fa      	ldr	r2, [r7, #12]
 80005a0:	793b      	ldrb	r3, [r7, #4]
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	480f      	ldr	r0, [pc, #60]	; (80005e4 <HTS221_Read_multi_i2c+0xd0>)
 80005a6:	8800      	ldrh	r0, [r0, #0]
 80005a8:	9000      	str	r0, [sp, #0]
 80005aa:	480f      	ldr	r0, [pc, #60]	; (80005e8 <HTS221_Read_multi_i2c+0xd4>)
 80005ac:	f001 fada 	bl	8001b64 <HAL_I2C_Master_Receive>
	for(int i =0;i<size;i++){
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
 80005b4:	e00b      	b.n	80005ce <HTS221_Read_multi_i2c+0xba>
		a1.arr[i] = buff_arry[i];
 80005b6:	68fa      	ldr	r2, [r7, #12]
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	4413      	add	r3, r2
 80005bc:	7819      	ldrb	r1, [r3, #0]
 80005be:	4a0b      	ldr	r2, [pc, #44]	; (80005ec <HTS221_Read_multi_i2c+0xd8>)
 80005c0:	697b      	ldr	r3, [r7, #20]
 80005c2:	4413      	add	r3, r2
 80005c4:	460a      	mov	r2, r1
 80005c6:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<size;i++){
 80005c8:	697b      	ldr	r3, [r7, #20]
 80005ca:	3301      	adds	r3, #1
 80005cc:	617b      	str	r3, [r7, #20]
 80005ce:	793b      	ldrb	r3, [r7, #4]
 80005d0:	697a      	ldr	r2, [r7, #20]
 80005d2:	429a      	cmp	r2, r3
 80005d4:	dbef      	blt.n	80005b6 <HTS221_Read_multi_i2c+0xa2>
	}
	return 1;
 80005d6:	2301      	movs	r3, #1
 80005d8:	46ad      	mov	sp, r5
}
 80005da:	4618      	mov	r0, r3
 80005dc:	3718      	adds	r7, #24
 80005de:	46bd      	mov	sp, r7
 80005e0:	bdb0      	pop	{r4, r5, r7, pc}
 80005e2:	bf00      	nop
 80005e4:	20000000 	.word	0x20000000
 80005e8:	2000002c 	.word	0x2000002c
 80005ec:	20000080 	.word	0x20000080

080005f0 <HTS221_Dev_ID>:
#include <stdio.h>

#include "HAL_I2C_anklabs.h"

uint8_t HTS221_Dev_ID()
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
  uint8_t ID = 0x00;
 80005f6:	2300      	movs	r3, #0
 80005f8:	71fb      	strb	r3, [r7, #7]
  //Read device ID from Register
  ID = HTS221_Read_i2c(HTS221_W_A, HTS221_R_A, HTS221_ID_R);
 80005fa:	220f      	movs	r2, #15
 80005fc:	21bf      	movs	r1, #191	; 0xbf
 80005fe:	20be      	movs	r0, #190	; 0xbe
 8000600:	f7ff ff5e 	bl	80004c0 <HTS221_Read_i2c>
 8000604:	4603      	mov	r3, r0
 8000606:	71fb      	strb	r3, [r7, #7]
  return ID;
 8000608:	79fb      	ldrb	r3, [r7, #7]
}
 800060a:	4618      	mov	r0, r3
 800060c:	3708      	adds	r7, #8
 800060e:	46bd      	mov	sp, r7
 8000610:	bd80      	pop	{r7, pc}

08000612 <HTS221_Detected>:
uint8_t HTS221_Detected()
{
 8000612:	b580      	push	{r7, lr}
 8000614:	b082      	sub	sp, #8
 8000616:	af00      	add	r7, sp, #0
	uint8_t ID = 0x00;
 8000618:	2300      	movs	r3, #0
 800061a:	71fb      	strb	r3, [r7, #7]
	ID = HTS221_Read_i2c(HTS221_W_A, HTS221_R_A, HTS221_ID_R);
 800061c:	220f      	movs	r2, #15
 800061e:	21bf      	movs	r1, #191	; 0xbf
 8000620:	20be      	movs	r0, #190	; 0xbe
 8000622:	f7ff ff4d 	bl	80004c0 <HTS221_Read_i2c>
 8000626:	4603      	mov	r3, r0
 8000628:	71fb      	strb	r3, [r7, #7]
	if(ID == HTS221_ID_D){
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	2bbc      	cmp	r3, #188	; 0xbc
 800062e:	d101      	bne.n	8000634 <HTS221_Detected+0x22>
		return 1;
 8000630:	2301      	movs	r3, #1
 8000632:	e000      	b.n	8000636 <HTS221_Detected+0x24>
	}
	else
		return 0;
 8000634:	2300      	movs	r3, #0
}
 8000636:	4618      	mov	r0, r3
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}

0800063e <HTS221_I>:
void HTS221_I()
{
 800063e:	b580      	push	{r7, lr}
 8000640:	b082      	sub	sp, #8
 8000642:	af00      	add	r7, sp, #0
  uint8_t temp = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	71fb      	strb	r3, [r7, #7]
  /* Control Register 1 */
  temp &= ~HTS221_BDU_MASK;
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	f023 0304 	bic.w	r3, r3, #4
 800064e:	71fb      	strb	r3, [r7, #7]
  temp |= (1 << HTS221_BDU_B); //Enable BDU
 8000650:	79fb      	ldrb	r3, [r7, #7]
 8000652:	f043 0304 	orr.w	r3, r3, #4
 8000656:	71fb      	strb	r3, [r7, #7]

  temp &= ~HTS221_ODR_MASK;
 8000658:	79fb      	ldrb	r3, [r7, #7]
 800065a:	f023 0303 	bic.w	r3, r3, #3
 800065e:	71fb      	strb	r3, [r7, #7]
  temp |= (uint8_t)0x01;       //Set ODR to 1Hz
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	f043 0301 	orr.w	r3, r3, #1
 8000666:	71fb      	strb	r3, [r7, #7]
  //temp |= (uint8_t)0x02;     //Set ODR to 7Hz
  //temp |= (uint8_t)0x03;     //Set ODR to 12.5Hz

  temp |= HTS221_PD_MASK;      //Activate the device(Power ON)
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800066e:	71fb      	strb	r3, [r7, #7]
  /* Apply settings to CTRL_REG1 */
  HTS221_Write_i2c(HTS221_W_A, HTS221_CTRL_R1, temp);
 8000670:	79fb      	ldrb	r3, [r7, #7]
 8000672:	461a      	mov	r2, r3
 8000674:	2120      	movs	r1, #32
 8000676:	20be      	movs	r0, #190	; 0xbe
 8000678:	f7ff fefc 	bl	8000474 <HTS221_Write_i2c>
}
 800067c:	bf00      	nop
 800067e:	3708      	adds	r7, #8
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <HTS221_Average_func>:
void HTS221_Average_func()
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	71fb      	strb	r3, [r7, #7]
	temp &= ~HTS221_AVG_T_MASK;
 800068e:	79fb      	ldrb	r3, [r7, #7]
 8000690:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8000694:	71fb      	strb	r3, [r7, #7]
	//temp |= ((uint8_t)0x00 << HTS221_AVG_T_B); //2 Average(0.8 uA)
	//temp |= ((uint8_t)0x01 << HTS221_AVG_T_B); //4 Average(1.05 uA)
	//temp |= ((uint8_t)0x02 << HTS221_AVG_T_B); //8 Average(1.40 uA)
	temp |= ((uint8_t)0x03 << HTS221_AVG_T_B); //16 Average(default)(2.10 uA)
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	f043 0318 	orr.w	r3, r3, #24
 800069c:	71fb      	strb	r3, [r7, #7]
	//temp |= ((uint8_t)0x04 << HTS221_AVG_T_B); //32 Average(3.43 uA)
	//temp |= ((uint8_t)0x05 << HTS221_AVG_T_B); //64 Average(6.15 uA)
	//temp |= ((uint8_t)0x06 << HTS221_AVG_T_B); //128 Average(11.6 uA)
	//temp |= ((uint8_t)0x07 << HTS221_AVG_T_B); //256 Average(22.5 uA)

	temp &= ~HTS221_AVG_H_MASK;
 800069e:	79fb      	ldrb	r3, [r7, #7]
 80006a0:	f023 0307 	bic.w	r3, r3, #7
 80006a4:	71fb      	strb	r3, [r7, #7]
	//temp |= ((uint8_t)0x00); //4 Average(0.8 uA)
	//temp |= ((uint8_t)0x01); //8 Average(1.05 uA)
	//temp |= ((uint8_t)0x02); //16 Average(1.40 uA)
	temp |= ((uint8_t)0x03); //32 Average(default)(2.10 uA)
 80006a6:	79fb      	ldrb	r3, [r7, #7]
 80006a8:	f043 0303 	orr.w	r3, r3, #3
 80006ac:	71fb      	strb	r3, [r7, #7]
	//temp |= ((uint8_t)0x04); //64 Average(3.43 uA)
	//temp |= ((uint8_t)0x05); //128 Average(6.15 uA)
	//temp |= ((uint8_t)0x06); //256 Average(11.6 uA)
	//temp |= ((uint8_t)0x07); //512 Average(22.5 uA)

	HTS221_Write_i2c(HTS221_W_A, HTS221_AV_CONF_R, temp);
 80006ae:	79fb      	ldrb	r3, [r7, #7]
 80006b0:	461a      	mov	r2, r3
 80006b2:	2110      	movs	r1, #16
 80006b4:	20be      	movs	r0, #190	; 0xbe
 80006b6:	f7ff fedd 	bl	8000474 <HTS221_Write_i2c>
}
 80006ba:	bf00      	nop
 80006bc:	3708      	adds	r7, #8
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}

080006c2 <HTS221_Start_conversion>:
void HTS221_Start_conversion()
{
 80006c2:	b580      	push	{r7, lr}
 80006c4:	af00      	add	r7, sp, #0
	HTS221_Write_i2c(HTS221_W_A, HTS221_CTRL_R2, HTS221_ONESHOT_MASK);
 80006c6:	2201      	movs	r2, #1
 80006c8:	2121      	movs	r1, #33	; 0x21
 80006ca:	20be      	movs	r0, #190	; 0xbe
 80006cc:	f7ff fed2 	bl	8000474 <HTS221_Write_i2c>
	//bit 0 sets to 0 after conversion complete hence we have to start the conversion manually.
}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}

080006d4 <HTS221_Data_Ready_T>:
uint8_t HTS221_Data_Ready_T()
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 80006da:	2300      	movs	r3, #0
 80006dc:	71fb      	strb	r3, [r7, #7]

	temp = HTS221_Read_i2c(HTS221_W_A, HTS221_R_A, HTS221_STATUS_R);
 80006de:	2227      	movs	r2, #39	; 0x27
 80006e0:	21bf      	movs	r1, #191	; 0xbf
 80006e2:	20be      	movs	r0, #190	; 0xbe
 80006e4:	f7ff feec 	bl	80004c0 <HTS221_Read_i2c>
 80006e8:	4603      	mov	r3, r0
 80006ea:	71fb      	strb	r3, [r7, #7]
	temp &= ~HTS221_H_MASK;
 80006ec:	79fb      	ldrb	r3, [r7, #7]
 80006ee:	f023 0302 	bic.w	r3, r3, #2
 80006f2:	71fb      	strb	r3, [r7, #7]
	if(temp){
 80006f4:	79fb      	ldrb	r3, [r7, #7]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <HTS221_Data_Ready_T+0x2a>
		return 1;
 80006fa:	2301      	movs	r3, #1
 80006fc:	e000      	b.n	8000700 <HTS221_Data_Ready_T+0x2c>
	}
	else{
		return 0;
 80006fe:	2300      	movs	r3, #0
	}
}
 8000700:	4618      	mov	r0, r3
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}

08000708 <HTS221_Data_Ready_H>:
uint8_t HTS221_Data_Ready_H()
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 800070e:	2300      	movs	r3, #0
 8000710:	71fb      	strb	r3, [r7, #7]

	temp = HTS221_Read_i2c(HTS221_W_A, HTS221_R_A, HTS221_STATUS_R);
 8000712:	2227      	movs	r2, #39	; 0x27
 8000714:	21bf      	movs	r1, #191	; 0xbf
 8000716:	20be      	movs	r0, #190	; 0xbe
 8000718:	f7ff fed2 	bl	80004c0 <HTS221_Read_i2c>
 800071c:	4603      	mov	r3, r0
 800071e:	71fb      	strb	r3, [r7, #7]
	temp &= ~HTS221_T_MASK;
 8000720:	79fb      	ldrb	r3, [r7, #7]
 8000722:	f023 0301 	bic.w	r3, r3, #1
 8000726:	71fb      	strb	r3, [r7, #7]
	if(temp){
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <HTS221_Data_Ready_H+0x2a>
		return 1;
 800072e:	2301      	movs	r3, #1
 8000730:	e000      	b.n	8000734 <HTS221_Data_Ready_H+0x2c>
	}
	else{
		return 0;
 8000732:	2300      	movs	r3, #0
	}
}
 8000734:	4618      	mov	r0, r3
 8000736:	3708      	adds	r7, #8
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}

0800073c <HTS221_Data_Ready>:
uint8_t HTS221_Data_Ready()
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
	uint8_t temp = 0;
 8000742:	2300      	movs	r3, #0
 8000744:	71fb      	strb	r3, [r7, #7]

	temp = HTS221_Read_i2c(HTS221_W_A, HTS221_R_A, HTS221_STATUS_R);
 8000746:	2227      	movs	r2, #39	; 0x27
 8000748:	21bf      	movs	r1, #191	; 0xbf
 800074a:	20be      	movs	r0, #190	; 0xbe
 800074c:	f7ff feb8 	bl	80004c0 <HTS221_Read_i2c>
 8000750:	4603      	mov	r3, r0
 8000752:	71fb      	strb	r3, [r7, #7]
	if(temp == 0x03){
 8000754:	79fb      	ldrb	r3, [r7, #7]
 8000756:	2b03      	cmp	r3, #3
 8000758:	d101      	bne.n	800075e <HTS221_Data_Ready+0x22>
		return 1;
 800075a:	2301      	movs	r3, #1
 800075c:	e000      	b.n	8000760 <HTS221_Data_Ready+0x24>
	}
	else{
		return 0;
 800075e:	2300      	movs	r3, #0
	}
}
 8000760:	4618      	mov	r0, r3
 8000762:	3708      	adds	r7, #8
 8000764:	46bd      	mov	sp, r7
 8000766:	bd80      	pop	{r7, pc}

08000768 <HTS221_Read_temp>:
int32_t HTS221_Read_temp(){
 8000768:	b580      	push	{r7, lr}
 800076a:	b088      	sub	sp, #32
 800076c:	af00      	add	r7, sp, #0
	uint8_t buff[4];
	uint8_t temp = 0;
 800076e:	2300      	movs	r3, #0
 8000770:	74fb      	strb	r3, [r7, #19]
	int16_t T0_OUT_LH, T1_OUT_LH, T0_degC_x8_LH, T1_degC_x8_LH, T_out;
	int32_t tmp32;

	HTS221_Read_multi_i2c(HTS221_W_A, HTS221_R_A, HTS221_T0_OUT_L, 4);
 8000772:	2304      	movs	r3, #4
 8000774:	223c      	movs	r2, #60	; 0x3c
 8000776:	21bf      	movs	r1, #191	; 0xbf
 8000778:	20be      	movs	r0, #190	; 0xbe
 800077a:	f7ff fecb 	bl	8000514 <HTS221_Read_multi_i2c>
	for(int i =0;i<4;i++){
 800077e:	2300      	movs	r3, #0
 8000780:	61fb      	str	r3, [r7, #28]
 8000782:	e00b      	b.n	800079c <HTS221_Read_temp+0x34>
		buff[i] = a1.arr[i];
 8000784:	4a50      	ldr	r2, [pc, #320]	; (80008c8 <HTS221_Read_temp+0x160>)
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	4413      	add	r3, r2
 800078a:	7819      	ldrb	r1, [r3, #0]
 800078c:	463a      	mov	r2, r7
 800078e:	69fb      	ldr	r3, [r7, #28]
 8000790:	4413      	add	r3, r2
 8000792:	460a      	mov	r2, r1
 8000794:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<4;i++){
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	3301      	adds	r3, #1
 800079a:	61fb      	str	r3, [r7, #28]
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	2b03      	cmp	r3, #3
 80007a0:	ddf0      	ble.n	8000784 <HTS221_Read_temp+0x1c>
	}

	T0_OUT_LH = (((uint16_t)buff[1]<<8) | ((uint16_t)buff[0]));
 80007a2:	787b      	ldrb	r3, [r7, #1]
 80007a4:	021b      	lsls	r3, r3, #8
 80007a6:	b21a      	sxth	r2, r3
 80007a8:	783b      	ldrb	r3, [r7, #0]
 80007aa:	b21b      	sxth	r3, r3
 80007ac:	4313      	orrs	r3, r2
 80007ae:	823b      	strh	r3, [r7, #16]
	T1_OUT_LH = (((uint16_t)buff[3]<<8) | ((uint16_t)buff[2]));
 80007b0:	78fb      	ldrb	r3, [r7, #3]
 80007b2:	021b      	lsls	r3, r3, #8
 80007b4:	b21a      	sxth	r2, r3
 80007b6:	78bb      	ldrb	r3, [r7, #2]
 80007b8:	b21b      	sxth	r3, r3
 80007ba:	4313      	orrs	r3, r2
 80007bc:	81fb      	strh	r3, [r7, #14]

	HTS221_Read_multi_i2c(HTS221_W_A, HTS221_R_A, HTS221_T0_DEGC_X8, 2);
 80007be:	2302      	movs	r3, #2
 80007c0:	2232      	movs	r2, #50	; 0x32
 80007c2:	21bf      	movs	r1, #191	; 0xbf
 80007c4:	20be      	movs	r0, #190	; 0xbe
 80007c6:	f7ff fea5 	bl	8000514 <HTS221_Read_multi_i2c>
	for(int i =0;i<2;i++){
 80007ca:	2300      	movs	r3, #0
 80007cc:	61bb      	str	r3, [r7, #24]
 80007ce:	e00b      	b.n	80007e8 <HTS221_Read_temp+0x80>
		buff[i] = a1.arr[i];
 80007d0:	4a3d      	ldr	r2, [pc, #244]	; (80008c8 <HTS221_Read_temp+0x160>)
 80007d2:	69bb      	ldr	r3, [r7, #24]
 80007d4:	4413      	add	r3, r2
 80007d6:	7819      	ldrb	r1, [r3, #0]
 80007d8:	463a      	mov	r2, r7
 80007da:	69bb      	ldr	r3, [r7, #24]
 80007dc:	4413      	add	r3, r2
 80007de:	460a      	mov	r2, r1
 80007e0:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<2;i++){
 80007e2:	69bb      	ldr	r3, [r7, #24]
 80007e4:	3301      	adds	r3, #1
 80007e6:	61bb      	str	r3, [r7, #24]
 80007e8:	69bb      	ldr	r3, [r7, #24]
 80007ea:	2b01      	cmp	r3, #1
 80007ec:	ddf0      	ble.n	80007d0 <HTS221_Read_temp+0x68>
	}
	temp = HTS221_Read_i2c(HTS221_W_A, HTS221_R_A, HTS221_T0_T1_DEGC_H2);
 80007ee:	2235      	movs	r2, #53	; 0x35
 80007f0:	21bf      	movs	r1, #191	; 0xbf
 80007f2:	20be      	movs	r0, #190	; 0xbe
 80007f4:	f7ff fe64 	bl	80004c0 <HTS221_Read_i2c>
 80007f8:	4603      	mov	r3, r0
 80007fa:	74fb      	strb	r3, [r7, #19]
	T0_degC_x8_LH = ((((uint16_t)(temp & 0x03)) << 8) | ((uint16_t)buff[0]));
 80007fc:	7cfb      	ldrb	r3, [r7, #19]
 80007fe:	021b      	lsls	r3, r3, #8
 8000800:	b21b      	sxth	r3, r3
 8000802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000806:	b21a      	sxth	r2, r3
 8000808:	783b      	ldrb	r3, [r7, #0]
 800080a:	b21b      	sxth	r3, r3
 800080c:	4313      	orrs	r3, r2
 800080e:	81bb      	strh	r3, [r7, #12]
	T1_degC_x8_LH = ((((uint16_t)(temp & 0x0C)) << 6) | ((uint16_t)buff[1]));
 8000810:	7cfb      	ldrb	r3, [r7, #19]
 8000812:	019b      	lsls	r3, r3, #6
 8000814:	b21b      	sxth	r3, r3
 8000816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800081a:	b21a      	sxth	r2, r3
 800081c:	787b      	ldrb	r3, [r7, #1]
 800081e:	b21b      	sxth	r3, r3
 8000820:	4313      	orrs	r3, r2
 8000822:	817b      	strh	r3, [r7, #10]
	T0_degC_x8_LH = T0_degC_x8_LH >> 3;
 8000824:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000828:	10db      	asrs	r3, r3, #3
 800082a:	81bb      	strh	r3, [r7, #12]
	T1_degC_x8_LH = T1_degC_x8_LH >> 3;
 800082c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000830:	10db      	asrs	r3, r3, #3
 8000832:	817b      	strh	r3, [r7, #10]

	HTS221_Read_multi_i2c(HTS221_W_A, HTS221_R_A, HTS221_T_OUT_L_R, 2);
 8000834:	2302      	movs	r3, #2
 8000836:	222a      	movs	r2, #42	; 0x2a
 8000838:	21bf      	movs	r1, #191	; 0xbf
 800083a:	20be      	movs	r0, #190	; 0xbe
 800083c:	f7ff fe6a 	bl	8000514 <HTS221_Read_multi_i2c>
	for(int i =0;i<2;i++){
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	e00b      	b.n	800085e <HTS221_Read_temp+0xf6>
		buff[i] = a1.arr[i];
 8000846:	4a20      	ldr	r2, [pc, #128]	; (80008c8 <HTS221_Read_temp+0x160>)
 8000848:	697b      	ldr	r3, [r7, #20]
 800084a:	4413      	add	r3, r2
 800084c:	7819      	ldrb	r1, [r3, #0]
 800084e:	463a      	mov	r2, r7
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	4413      	add	r3, r2
 8000854:	460a      	mov	r2, r1
 8000856:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<2;i++){
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	3301      	adds	r3, #1
 800085c:	617b      	str	r3, [r7, #20]
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	2b01      	cmp	r3, #1
 8000862:	ddf0      	ble.n	8000846 <HTS221_Read_temp+0xde>
	}
	T_out = (((uint16_t)buff[1]<<8) | ((uint16_t)buff[0]));
 8000864:	787b      	ldrb	r3, [r7, #1]
 8000866:	021b      	lsls	r3, r3, #8
 8000868:	b21a      	sxth	r2, r3
 800086a:	783b      	ldrb	r3, [r7, #0]
 800086c:	b21b      	sxth	r3, r3
 800086e:	4313      	orrs	r3, r2
 8000870:	813b      	strh	r3, [r7, #8]

	tmp32 = (((((uint32_t)(T_out - T0_OUT_LH)) * ((uint32_t)(T1_degC_x8_LH - T0_degC_x8_LH) * 10)) / ((uint32_t)(T1_OUT_LH - T0_OUT_LH)))  +  (uint32_t)(T0_degC_x8_LH * 10));
 8000872:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000876:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800087a:	1ad3      	subs	r3, r2, r3
 800087c:	4619      	mov	r1, r3
 800087e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000882:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000886:	1ad3      	subs	r3, r2, r3
 8000888:	fb03 f201 	mul.w	r2, r3, r1
 800088c:	4613      	mov	r3, r2
 800088e:	009b      	lsls	r3, r3, #2
 8000890:	4413      	add	r3, r2
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	4619      	mov	r1, r3
 8000896:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800089a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800089e:	1ad3      	subs	r3, r2, r3
 80008a0:	fbb1 f1f3 	udiv	r1, r1, r3
 80008a4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80008a8:	4613      	mov	r3, r2
 80008aa:	009b      	lsls	r3, r3, #2
 80008ac:	4413      	add	r3, r2
 80008ae:	005b      	lsls	r3, r3, #1
 80008b0:	440b      	add	r3, r1
 80008b2:	607b      	str	r3, [r7, #4]
	return tmp32 *10;
 80008b4:	687a      	ldr	r2, [r7, #4]
 80008b6:	4613      	mov	r3, r2
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	4413      	add	r3, r2
 80008bc:	005b      	lsls	r3, r3, #1
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3720      	adds	r7, #32
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
 80008c6:	bf00      	nop
 80008c8:	20000080 	.word	0x20000080

080008cc <HTS221_Read_humi>:

int32_t HTS221_Read_humi(){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b08a      	sub	sp, #40	; 0x28
 80008d0:	af00      	add	r7, sp, #0
	uint8_t buff[2];
	int16_t H0_T0_OUT_LH, H1_T0_OUT_LH, H0_rh_x2_LH, H1_rh_x2_LH, H_out;
	int32_t tmp32;
	int32_t Temp;

	HTS221_Read_multi_i2c(HTS221_W_A, HTS221_R_A, HTS221_H0_T0_OUT_L, 2);
 80008d2:	2302      	movs	r3, #2
 80008d4:	2236      	movs	r2, #54	; 0x36
 80008d6:	21bf      	movs	r1, #191	; 0xbf
 80008d8:	20be      	movs	r0, #190	; 0xbe
 80008da:	f7ff fe1b 	bl	8000514 <HTS221_Read_multi_i2c>
	for(int i =0;i<2;i++){
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
 80008e2:	e00b      	b.n	80008fc <HTS221_Read_humi+0x30>
		buff[i] = a1.arr[i];
 80008e4:	4a50      	ldr	r2, [pc, #320]	; (8000a28 <HTS221_Read_humi+0x15c>)
 80008e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008e8:	4413      	add	r3, r2
 80008ea:	7819      	ldrb	r1, [r3, #0]
 80008ec:	463a      	mov	r2, r7
 80008ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f0:	4413      	add	r3, r2
 80008f2:	460a      	mov	r2, r1
 80008f4:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<2;i++){
 80008f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008f8:	3301      	adds	r3, #1
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
 80008fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80008fe:	2b01      	cmp	r3, #1
 8000900:	ddf0      	ble.n	80008e4 <HTS221_Read_humi+0x18>
	}
	H0_T0_OUT_LH = (((uint16_t)buff[1]<<8) | ((uint16_t)buff[0]));
 8000902:	787b      	ldrb	r3, [r7, #1]
 8000904:	021b      	lsls	r3, r3, #8
 8000906:	b21a      	sxth	r2, r3
 8000908:	783b      	ldrb	r3, [r7, #0]
 800090a:	b21b      	sxth	r3, r3
 800090c:	4313      	orrs	r3, r2
 800090e:	82fb      	strh	r3, [r7, #22]
    HTS221_Read_multi_i2c(HTS221_W_A, HTS221_R_A, HTS221_H1_T0_OUT_L, 2);
 8000910:	2302      	movs	r3, #2
 8000912:	223a      	movs	r2, #58	; 0x3a
 8000914:	21bf      	movs	r1, #191	; 0xbf
 8000916:	20be      	movs	r0, #190	; 0xbe
 8000918:	f7ff fdfc 	bl	8000514 <HTS221_Read_multi_i2c>
	for(int i =0;i<2;i++){
 800091c:	2300      	movs	r3, #0
 800091e:	623b      	str	r3, [r7, #32]
 8000920:	e00b      	b.n	800093a <HTS221_Read_humi+0x6e>
		buff[i] = a1.arr[i];
 8000922:	4a41      	ldr	r2, [pc, #260]	; (8000a28 <HTS221_Read_humi+0x15c>)
 8000924:	6a3b      	ldr	r3, [r7, #32]
 8000926:	4413      	add	r3, r2
 8000928:	7819      	ldrb	r1, [r3, #0]
 800092a:	463a      	mov	r2, r7
 800092c:	6a3b      	ldr	r3, [r7, #32]
 800092e:	4413      	add	r3, r2
 8000930:	460a      	mov	r2, r1
 8000932:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<2;i++){
 8000934:	6a3b      	ldr	r3, [r7, #32]
 8000936:	3301      	adds	r3, #1
 8000938:	623b      	str	r3, [r7, #32]
 800093a:	6a3b      	ldr	r3, [r7, #32]
 800093c:	2b01      	cmp	r3, #1
 800093e:	ddf0      	ble.n	8000922 <HTS221_Read_humi+0x56>
	}
    H1_T0_OUT_LH = (((uint16_t)buff[1]<<8) | ((uint16_t)buff[0]));
 8000940:	787b      	ldrb	r3, [r7, #1]
 8000942:	021b      	lsls	r3, r3, #8
 8000944:	b21a      	sxth	r2, r3
 8000946:	783b      	ldrb	r3, [r7, #0]
 8000948:	b21b      	sxth	r3, r3
 800094a:	4313      	orrs	r3, r2
 800094c:	82bb      	strh	r3, [r7, #20]

	HTS221_Read_multi_i2c(HTS221_W_A, HTS221_R_A, HTS221_H0_RH_X2, 2);
 800094e:	2302      	movs	r3, #2
 8000950:	2230      	movs	r2, #48	; 0x30
 8000952:	21bf      	movs	r1, #191	; 0xbf
 8000954:	20be      	movs	r0, #190	; 0xbe
 8000956:	f7ff fddd 	bl	8000514 <HTS221_Read_multi_i2c>
	for(int i =0;i<2;i++){
 800095a:	2300      	movs	r3, #0
 800095c:	61fb      	str	r3, [r7, #28]
 800095e:	e00b      	b.n	8000978 <HTS221_Read_humi+0xac>
		buff[i] = a1.arr[i];
 8000960:	4a31      	ldr	r2, [pc, #196]	; (8000a28 <HTS221_Read_humi+0x15c>)
 8000962:	69fb      	ldr	r3, [r7, #28]
 8000964:	4413      	add	r3, r2
 8000966:	7819      	ldrb	r1, [r3, #0]
 8000968:	463a      	mov	r2, r7
 800096a:	69fb      	ldr	r3, [r7, #28]
 800096c:	4413      	add	r3, r2
 800096e:	460a      	mov	r2, r1
 8000970:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<2;i++){
 8000972:	69fb      	ldr	r3, [r7, #28]
 8000974:	3301      	adds	r3, #1
 8000976:	61fb      	str	r3, [r7, #28]
 8000978:	69fb      	ldr	r3, [r7, #28]
 800097a:	2b01      	cmp	r3, #1
 800097c:	ddf0      	ble.n	8000960 <HTS221_Read_humi+0x94>
	}
	H0_rh_x2_LH = buff[0]>>1;
 800097e:	783b      	ldrb	r3, [r7, #0]
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	b2db      	uxtb	r3, r3
 8000984:	827b      	strh	r3, [r7, #18]
	H1_rh_x2_LH = buff[1]>>1;
 8000986:	787b      	ldrb	r3, [r7, #1]
 8000988:	085b      	lsrs	r3, r3, #1
 800098a:	b2db      	uxtb	r3, r3
 800098c:	823b      	strh	r3, [r7, #16]

	HTS221_Read_multi_i2c(HTS221_W_A, HTS221_R_A, HTS221_H_OUT_L_R, 2);
 800098e:	2302      	movs	r3, #2
 8000990:	2228      	movs	r2, #40	; 0x28
 8000992:	21bf      	movs	r1, #191	; 0xbf
 8000994:	20be      	movs	r0, #190	; 0xbe
 8000996:	f7ff fdbd 	bl	8000514 <HTS221_Read_multi_i2c>
	for(int i =0;i<2;i++){
 800099a:	2300      	movs	r3, #0
 800099c:	61bb      	str	r3, [r7, #24]
 800099e:	e00b      	b.n	80009b8 <HTS221_Read_humi+0xec>
		buff[i] = a1.arr[i];
 80009a0:	4a21      	ldr	r2, [pc, #132]	; (8000a28 <HTS221_Read_humi+0x15c>)
 80009a2:	69bb      	ldr	r3, [r7, #24]
 80009a4:	4413      	add	r3, r2
 80009a6:	7819      	ldrb	r1, [r3, #0]
 80009a8:	463a      	mov	r2, r7
 80009aa:	69bb      	ldr	r3, [r7, #24]
 80009ac:	4413      	add	r3, r2
 80009ae:	460a      	mov	r2, r1
 80009b0:	701a      	strb	r2, [r3, #0]
	for(int i =0;i<2;i++){
 80009b2:	69bb      	ldr	r3, [r7, #24]
 80009b4:	3301      	adds	r3, #1
 80009b6:	61bb      	str	r3, [r7, #24]
 80009b8:	69bb      	ldr	r3, [r7, #24]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	ddf0      	ble.n	80009a0 <HTS221_Read_humi+0xd4>
	}
	H_out = (((uint16_t)buff[1]<<8) | ((uint16_t)buff[0]));
 80009be:	787b      	ldrb	r3, [r7, #1]
 80009c0:	021b      	lsls	r3, r3, #8
 80009c2:	b21a      	sxth	r2, r3
 80009c4:	783b      	ldrb	r3, [r7, #0]
 80009c6:	b21b      	sxth	r3, r3
 80009c8:	4313      	orrs	r3, r2
 80009ca:	81fb      	strh	r3, [r7, #14]

	//tmp32 = (((((uint32_t)(H_out - H0_T0_OUT_LH)) * ((uint32_t)(H1_rh_x2_LH - H0_rh_x2_LH) * 10)) / ((uint32_t)(H1_T0_OUT_LH - H0_T0_OUT_LH)))  +  (uint32_t)(H0_rh_x2_LH * 10));
	Temp = ((uint32_t)(H_out - H0_T0_OUT_LH)) * ((uint32_t)(H1_rh_x2_LH - H0_rh_x2_LH) * 10);
 80009cc:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80009d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80009d4:	1ad3      	subs	r3, r2, r3
 80009d6:	4619      	mov	r1, r3
 80009d8:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 80009dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80009e0:	1ad3      	subs	r3, r2, r3
 80009e2:	fb03 f201 	mul.w	r2, r3, r1
 80009e6:	4613      	mov	r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	4413      	add	r3, r2
 80009ec:	005b      	lsls	r3, r3, #1
 80009ee:	60bb      	str	r3, [r7, #8]
	tmp32 = (uint16_t)(Temp / (uint32_t)(H1_T0_OUT_LH - H0_T0_OUT_LH))  +  (uint32_t)(H0_rh_x2_LH * 10);
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 80009f6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80009fa:	1a8a      	subs	r2, r1, r2
 80009fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	4619      	mov	r1, r3
 8000a04:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8000a08:	4613      	mov	r3, r2
 8000a0a:	009b      	lsls	r3, r3, #2
 8000a0c:	4413      	add	r3, r2
 8000a0e:	005b      	lsls	r3, r3, #1
 8000a10:	440b      	add	r3, r1
 8000a12:	607b      	str	r3, [r7, #4]
	return tmp32*10;
 8000a14:	687a      	ldr	r2, [r7, #4]
 8000a16:	4613      	mov	r3, r2
 8000a18:	009b      	lsls	r3, r3, #2
 8000a1a:	4413      	add	r3, r2
 8000a1c:	005b      	lsls	r3, r3, #1
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	3728      	adds	r7, #40	; 0x28
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	20000080 	.word	0x20000080

08000a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b084      	sub	sp, #16
 8000a30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a32:	f000 fb50 	bl	80010d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a36:	f000 f8df 	bl	8000bf8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a3a:	f000 f983 	bl	8000d44 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a3e:	f000 f929 	bl	8000c94 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000a42:	f000 f955 	bl	8000cf0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */
  HTS221_I();
 8000a46:	f7ff fdfa 	bl	800063e <HTS221_I>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  uint8_t Device_ID = 49;
 8000a4a:	2331      	movs	r3, #49	; 0x31
 8000a4c:	73fb      	strb	r3, [r7, #15]
	  int32_t Temperature = 0;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	60bb      	str	r3, [r7, #8]
	  int32_t Humidity = 0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	607b      	str	r3, [r7, #4]
///////////////////////////////////////////////////////////////////////////////////
	  Device_ID = HTS221_Dev_ID();
 8000a56:	f7ff fdcb 	bl	80005f0 <HTS221_Dev_ID>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	73fb      	strb	r3, [r7, #15]
//////////////////////////////////////////////////////////////////////////////////
	  if(HTS221_Detected()){
 8000a5e:	f7ff fdd8 	bl	8000612 <HTS221_Detected>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d007      	beq.n	8000a78 <main+0x4c>
		  HAL_UART_Transmit(&huart1, "HTS221 Detected" "\n", 16, 500);
 8000a68:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a6c:	2210      	movs	r2, #16
 8000a6e:	4958      	ldr	r1, [pc, #352]	; (8000bd0 <main+0x1a4>)
 8000a70:	4858      	ldr	r0, [pc, #352]	; (8000bd4 <main+0x1a8>)
 8000a72:	f002 fbb2 	bl	80031da <HAL_UART_Transmit>
 8000a76:	e006      	b.n	8000a86 <main+0x5a>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart1, "HTS221 Not Detected" "\n", 20, 500);
 8000a78:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a7c:	2214      	movs	r2, #20
 8000a7e:	4956      	ldr	r1, [pc, #344]	; (8000bd8 <main+0x1ac>)
 8000a80:	4854      	ldr	r0, [pc, #336]	; (8000bd4 <main+0x1a8>)
 8000a82:	f002 fbaa 	bl	80031da <HAL_UART_Transmit>
	  }
///////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
	  HTS221_Average_func();
 8000a86:	f7ff fdfd 	bl	8000684 <HTS221_Average_func>
//////////////////////////////////////////////////////////////////////////////////
	  HTS221_Start_conversion();
 8000a8a:	f7ff fe1a 	bl	80006c2 <HTS221_Start_conversion>
//////////////////////////////////////////////////////////////////////////////////
	  HAL_UART_Transmit(&huart1, "HTS221 Data_Ready_T" "\n", 20, 500);
 8000a8e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a92:	2214      	movs	r2, #20
 8000a94:	4951      	ldr	r1, [pc, #324]	; (8000bdc <main+0x1b0>)
 8000a96:	484f      	ldr	r0, [pc, #316]	; (8000bd4 <main+0x1a8>)
 8000a98:	f002 fb9f 	bl	80031da <HAL_UART_Transmit>
	  if(HTS221_Data_Ready_T()){
 8000a9c:	f7ff fe1a 	bl	80006d4 <HTS221_Data_Ready_T>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d01c      	beq.n	8000ae0 <main+0xb4>
		  Temperature = HTS221_Read_temp();
 8000aa6:	f7ff fe5f 	bl	8000768 <HTS221_Read_temp>
 8000aaa:	60b8      	str	r0, [r7, #8]
		  fsplit(Temperature);
 8000aac:	68bb      	ldr	r3, [r7, #8]
 8000aae:	b21b      	sxth	r3, r3
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f000 f969 	bl	8000d88 <fsplit>
		  HAL_UART_Transmit(&huart1, "Temperature : " , 14, 500);
 8000ab6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000aba:	220e      	movs	r2, #14
 8000abc:	4948      	ldr	r1, [pc, #288]	; (8000be0 <main+0x1b4>)
 8000abe:	4845      	ldr	r0, [pc, #276]	; (8000bd4 <main+0x1a8>)
 8000ac0:	f002 fb8b 	bl	80031da <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, SET_val, 5, 500);
 8000ac4:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ac8:	2205      	movs	r2, #5
 8000aca:	4946      	ldr	r1, [pc, #280]	; (8000be4 <main+0x1b8>)
 8000acc:	4841      	ldr	r0, [pc, #260]	; (8000bd4 <main+0x1a8>)
 8000ace:	f002 fb84 	bl	80031da <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, "\n", 1, 500);
 8000ad2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	4943      	ldr	r1, [pc, #268]	; (8000be8 <main+0x1bc>)
 8000ada:	483e      	ldr	r0, [pc, #248]	; (8000bd4 <main+0x1a8>)
 8000adc:	f002 fb7d 	bl	80031da <HAL_UART_Transmit>
	  }
//////////////////////////////////////////////////////////////////////////////////
	  HAL_UART_Transmit(&huart1, "HTS221 Data_Ready_H" "\n", 20, 500);
 8000ae0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ae4:	2214      	movs	r2, #20
 8000ae6:	4941      	ldr	r1, [pc, #260]	; (8000bec <main+0x1c0>)
 8000ae8:	483a      	ldr	r0, [pc, #232]	; (8000bd4 <main+0x1a8>)
 8000aea:	f002 fb76 	bl	80031da <HAL_UART_Transmit>
	  if(HTS221_Data_Ready_H()){
 8000aee:	f7ff fe0b 	bl	8000708 <HTS221_Data_Ready_H>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d01c      	beq.n	8000b32 <main+0x106>
		  Humidity = HTS221_Read_humi();
 8000af8:	f7ff fee8 	bl	80008cc <HTS221_Read_humi>
 8000afc:	6078      	str	r0, [r7, #4]
		  fsplit(Humidity);
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	b21b      	sxth	r3, r3
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 f940 	bl	8000d88 <fsplit>
		  HAL_UART_Transmit(&huart1, "Humidity : " , 11, 500);
 8000b08:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b0c:	220b      	movs	r2, #11
 8000b0e:	4938      	ldr	r1, [pc, #224]	; (8000bf0 <main+0x1c4>)
 8000b10:	4830      	ldr	r0, [pc, #192]	; (8000bd4 <main+0x1a8>)
 8000b12:	f002 fb62 	bl	80031da <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, SET_val, 5, 500);
 8000b16:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b1a:	2205      	movs	r2, #5
 8000b1c:	4931      	ldr	r1, [pc, #196]	; (8000be4 <main+0x1b8>)
 8000b1e:	482d      	ldr	r0, [pc, #180]	; (8000bd4 <main+0x1a8>)
 8000b20:	f002 fb5b 	bl	80031da <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, "\n", 1, 500);
 8000b24:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b28:	2201      	movs	r2, #1
 8000b2a:	492f      	ldr	r1, [pc, #188]	; (8000be8 <main+0x1bc>)
 8000b2c:	4829      	ldr	r0, [pc, #164]	; (8000bd4 <main+0x1a8>)
 8000b2e:	f002 fb54 	bl	80031da <HAL_UART_Transmit>
	  }
//////////////////////////////////////////////////////////////////////////////////////
	  HAL_UART_Transmit(&huart1, "HTS221 Data_Ready_" "\n", 19, 500);
 8000b32:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b36:	2213      	movs	r2, #19
 8000b38:	492e      	ldr	r1, [pc, #184]	; (8000bf4 <main+0x1c8>)
 8000b3a:	4826      	ldr	r0, [pc, #152]	; (8000bd4 <main+0x1a8>)
 8000b3c:	f002 fb4d 	bl	80031da <HAL_UART_Transmit>
	  HAL_Delay(3000);
 8000b40:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000b44:	f000 fb36 	bl	80011b4 <HAL_Delay>
	  if(HTS221_Data_Ready()){
 8000b48:	f7ff fdf8 	bl	800073c <HTS221_Data_Ready>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d039      	beq.n	8000bc6 <main+0x19a>
		  Temperature = HTS221_Read_temp();
 8000b52:	f7ff fe09 	bl	8000768 <HTS221_Read_temp>
 8000b56:	60b8      	str	r0, [r7, #8]
		  Humidity = HTS221_Read_humi();
 8000b58:	f7ff feb8 	bl	80008cc <HTS221_Read_humi>
 8000b5c:	6078      	str	r0, [r7, #4]
		  fsplit(Temperature);
 8000b5e:	68bb      	ldr	r3, [r7, #8]
 8000b60:	b21b      	sxth	r3, r3
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 f910 	bl	8000d88 <fsplit>
		  HAL_UART_Transmit(&huart1, "Temperature : " , 14, 500);
 8000b68:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b6c:	220e      	movs	r2, #14
 8000b6e:	491c      	ldr	r1, [pc, #112]	; (8000be0 <main+0x1b4>)
 8000b70:	4818      	ldr	r0, [pc, #96]	; (8000bd4 <main+0x1a8>)
 8000b72:	f002 fb32 	bl	80031da <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, SET_val, 5, 500);
 8000b76:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b7a:	2205      	movs	r2, #5
 8000b7c:	4919      	ldr	r1, [pc, #100]	; (8000be4 <main+0x1b8>)
 8000b7e:	4815      	ldr	r0, [pc, #84]	; (8000bd4 <main+0x1a8>)
 8000b80:	f002 fb2b 	bl	80031da <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, "\n", 1, 500);
 8000b84:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000b88:	2201      	movs	r2, #1
 8000b8a:	4917      	ldr	r1, [pc, #92]	; (8000be8 <main+0x1bc>)
 8000b8c:	4811      	ldr	r0, [pc, #68]	; (8000bd4 <main+0x1a8>)
 8000b8e:	f002 fb24 	bl	80031da <HAL_UART_Transmit>
		  fsplit(Humidity);
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	b21b      	sxth	r3, r3
 8000b96:	4618      	mov	r0, r3
 8000b98:	f000 f8f6 	bl	8000d88 <fsplit>
		  HAL_UART_Transmit(&huart1, "Humidity : " , 11, 500);
 8000b9c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000ba0:	220b      	movs	r2, #11
 8000ba2:	4913      	ldr	r1, [pc, #76]	; (8000bf0 <main+0x1c4>)
 8000ba4:	480b      	ldr	r0, [pc, #44]	; (8000bd4 <main+0x1a8>)
 8000ba6:	f002 fb18 	bl	80031da <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, SET_val, 5, 500);
 8000baa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bae:	2205      	movs	r2, #5
 8000bb0:	490c      	ldr	r1, [pc, #48]	; (8000be4 <main+0x1b8>)
 8000bb2:	4808      	ldr	r0, [pc, #32]	; (8000bd4 <main+0x1a8>)
 8000bb4:	f002 fb11 	bl	80031da <HAL_UART_Transmit>
		  HAL_UART_Transmit(&huart1, "\n", 1, 500);
 8000bb8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	490a      	ldr	r1, [pc, #40]	; (8000be8 <main+0x1bc>)
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <main+0x1a8>)
 8000bc2:	f002 fb0a 	bl	80031da <HAL_UART_Transmit>
	  }
///////////////////////////////////////////////////////////////////////////////////
    /* USER CODE END WHILE */
HAL_Delay(1000);
 8000bc6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000bca:	f000 faf3 	bl	80011b4 <HAL_Delay>
  {
 8000bce:	e73c      	b.n	8000a4a <main+0x1e>
 8000bd0:	080035d8 	.word	0x080035d8
 8000bd4:	20000098 	.word	0x20000098
 8000bd8:	080035ec 	.word	0x080035ec
 8000bdc:	08003604 	.word	0x08003604
 8000be0:	0800361c 	.word	0x0800361c
 8000be4:	2000008c 	.word	0x2000008c
 8000be8:	0800362c 	.word	0x0800362c
 8000bec:	08003630 	.word	0x08003630
 8000bf0:	08003648 	.word	0x08003648
 8000bf4:	08003654 	.word	0x08003654

08000bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b092      	sub	sp, #72	; 0x48
 8000bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfe:	f107 0314 	add.w	r3, r7, #20
 8000c02:	2234      	movs	r2, #52	; 0x34
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f002 fcd2 	bl	80035b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0c:	463b      	mov	r3, r7
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c1a:	4b1d      	ldr	r3, [pc, #116]	; (8000c90 <SystemClock_Config+0x98>)
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8000c22:	4a1b      	ldr	r2, [pc, #108]	; (8000c90 <SystemClock_Config+0x98>)
 8000c24:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000c28:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c32:	2310      	movs	r3, #16
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c36:	2302      	movs	r3, #2
 8000c38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8000c3e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000c42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8000c44:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c48:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f001 fcda 	bl	8002608 <HAL_RCC_OscConfig>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000c5a:	f000 f927 	bl	8000eac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5e:	230f      	movs	r3, #15
 8000c60:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c62:	2303      	movs	r3, #3
 8000c64:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c6e:	2300      	movs	r3, #0
 8000c70:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c72:	463b      	mov	r3, r7
 8000c74:	2101      	movs	r1, #1
 8000c76:	4618      	mov	r0, r3
 8000c78:	f001 fff6 	bl	8002c68 <HAL_RCC_ClockConfig>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000c82:	f000 f913 	bl	8000eac <Error_Handler>
  }
}
 8000c86:	bf00      	nop
 8000c88:	3748      	adds	r7, #72	; 0x48
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	40007000 	.word	0x40007000

08000c94 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c98:	4b12      	ldr	r3, [pc, #72]	; (8000ce4 <MX_I2C1_Init+0x50>)
 8000c9a:	4a13      	ldr	r2, [pc, #76]	; (8000ce8 <MX_I2C1_Init+0x54>)
 8000c9c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c9e:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <MX_I2C1_Init+0x50>)
 8000ca0:	4a12      	ldr	r2, [pc, #72]	; (8000cec <MX_I2C1_Init+0x58>)
 8000ca2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ca4:	4b0f      	ldr	r3, [pc, #60]	; (8000ce4 <MX_I2C1_Init+0x50>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000caa:	4b0e      	ldr	r3, [pc, #56]	; (8000ce4 <MX_I2C1_Init+0x50>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <MX_I2C1_Init+0x50>)
 8000cb2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cb6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb8:	4b0a      	ldr	r3, [pc, #40]	; (8000ce4 <MX_I2C1_Init+0x50>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cbe:	4b09      	ldr	r3, [pc, #36]	; (8000ce4 <MX_I2C1_Init+0x50>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cc4:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <MX_I2C1_Init+0x50>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cca:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <MX_I2C1_Init+0x50>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cd0:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <MX_I2C1_Init+0x50>)
 8000cd2:	f000 fd05 	bl	80016e0 <HAL_I2C_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cdc:	f000 f8e6 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ce0:	bf00      	nop
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	2000002c 	.word	0x2000002c
 8000ce8:	40005400 	.word	0x40005400
 8000cec:	000186a0 	.word	0x000186a0

08000cf0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <MX_USART1_UART_Init+0x4c>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <MX_USART1_UART_Init+0x50>)
 8000cf8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <MX_USART1_UART_Init+0x4c>)
 8000cfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000d02:	4b0e      	ldr	r3, [pc, #56]	; (8000d3c <MX_USART1_UART_Init+0x4c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000d08:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <MX_USART1_UART_Init+0x4c>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000d0e:	4b0b      	ldr	r3, [pc, #44]	; (8000d3c <MX_USART1_UART_Init+0x4c>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000d14:	4b09      	ldr	r3, [pc, #36]	; (8000d3c <MX_USART1_UART_Init+0x4c>)
 8000d16:	220c      	movs	r2, #12
 8000d18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d1a:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <MX_USART1_UART_Init+0x4c>)
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <MX_USART1_UART_Init+0x4c>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000d26:	4805      	ldr	r0, [pc, #20]	; (8000d3c <MX_USART1_UART_Init+0x4c>)
 8000d28:	f002 fa0a 	bl	8003140 <HAL_UART_Init>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d001      	beq.n	8000d36 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000d32:	f000 f8bb 	bl	8000eac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	20000098 	.word	0x20000098
 8000d40:	40013800 	.word	0x40013800

08000d44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b083      	sub	sp, #12
 8000d48:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	4b0e      	ldr	r3, [pc, #56]	; (8000d84 <MX_GPIO_Init+0x40>)
 8000d4c:	69db      	ldr	r3, [r3, #28]
 8000d4e:	4a0d      	ldr	r2, [pc, #52]	; (8000d84 <MX_GPIO_Init+0x40>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	61d3      	str	r3, [r2, #28]
 8000d56:	4b0b      	ldr	r3, [pc, #44]	; (8000d84 <MX_GPIO_Init+0x40>)
 8000d58:	69db      	ldr	r3, [r3, #28]
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	4b08      	ldr	r3, [pc, #32]	; (8000d84 <MX_GPIO_Init+0x40>)
 8000d64:	69db      	ldr	r3, [r3, #28]
 8000d66:	4a07      	ldr	r2, [pc, #28]	; (8000d84 <MX_GPIO_Init+0x40>)
 8000d68:	f043 0302 	orr.w	r3, r3, #2
 8000d6c:	61d3      	str	r3, [r2, #28]
 8000d6e:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <MX_GPIO_Init+0x40>)
 8000d70:	69db      	ldr	r3, [r3, #28]
 8000d72:	f003 0302 	and.w	r3, r3, #2
 8000d76:	603b      	str	r3, [r7, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]

}
 8000d7a:	bf00      	nop
 8000d7c:	370c      	adds	r7, #12
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bc80      	pop	{r7}
 8000d82:	4770      	bx	lr
 8000d84:	40023800 	.word	0x40023800

08000d88 <fsplit>:

/* USER CODE BEGIN 4 */
void fsplit(int16_t dig_val){
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	80fb      	strh	r3, [r7, #6]
	dig_5 = (dig_val/1000)%10;
 8000d92:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d96:	4a3d      	ldr	r2, [pc, #244]	; (8000e8c <fsplit+0x104>)
 8000d98:	fb82 1203 	smull	r1, r2, r2, r3
 8000d9c:	1192      	asrs	r2, r2, #6
 8000d9e:	17db      	asrs	r3, r3, #31
 8000da0:	1ad3      	subs	r3, r2, r3
 8000da2:	b21a      	sxth	r2, r3
 8000da4:	4b3a      	ldr	r3, [pc, #232]	; (8000e90 <fsplit+0x108>)
 8000da6:	fb83 1302 	smull	r1, r3, r3, r2
 8000daa:	1099      	asrs	r1, r3, #2
 8000dac:	17d3      	asrs	r3, r2, #31
 8000dae:	1ac9      	subs	r1, r1, r3
 8000db0:	460b      	mov	r3, r1
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	440b      	add	r3, r1
 8000db6:	005b      	lsls	r3, r3, #1
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	b21a      	sxth	r2, r3
 8000dbc:	4b35      	ldr	r3, [pc, #212]	; (8000e94 <fsplit+0x10c>)
 8000dbe:	801a      	strh	r2, [r3, #0]
	SET_val[0] = dig_5 + 48;
 8000dc0:	4b34      	ldr	r3, [pc, #208]	; (8000e94 <fsplit+0x10c>)
 8000dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dc6:	b2db      	uxtb	r3, r3
 8000dc8:	3330      	adds	r3, #48	; 0x30
 8000dca:	b2da      	uxtb	r2, r3
 8000dcc:	4b32      	ldr	r3, [pc, #200]	; (8000e98 <fsplit+0x110>)
 8000dce:	701a      	strb	r2, [r3, #0]
	dig_4 = (dig_val/100)%10;
 8000dd0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000dd4:	4a31      	ldr	r2, [pc, #196]	; (8000e9c <fsplit+0x114>)
 8000dd6:	fb82 1203 	smull	r1, r2, r2, r3
 8000dda:	1152      	asrs	r2, r2, #5
 8000ddc:	17db      	asrs	r3, r3, #31
 8000dde:	1ad3      	subs	r3, r2, r3
 8000de0:	b21a      	sxth	r2, r3
 8000de2:	4b2b      	ldr	r3, [pc, #172]	; (8000e90 <fsplit+0x108>)
 8000de4:	fb83 1302 	smull	r1, r3, r3, r2
 8000de8:	1099      	asrs	r1, r3, #2
 8000dea:	17d3      	asrs	r3, r2, #31
 8000dec:	1ac9      	subs	r1, r1, r3
 8000dee:	460b      	mov	r3, r1
 8000df0:	009b      	lsls	r3, r3, #2
 8000df2:	440b      	add	r3, r1
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	1ad3      	subs	r3, r2, r3
 8000df8:	b21a      	sxth	r2, r3
 8000dfa:	4b29      	ldr	r3, [pc, #164]	; (8000ea0 <fsplit+0x118>)
 8000dfc:	801a      	strh	r2, [r3, #0]
	SET_val[1] = dig_4 + 48;
 8000dfe:	4b28      	ldr	r3, [pc, #160]	; (8000ea0 <fsplit+0x118>)
 8000e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	3330      	adds	r3, #48	; 0x30
 8000e08:	b2da      	uxtb	r2, r3
 8000e0a:	4b23      	ldr	r3, [pc, #140]	; (8000e98 <fsplit+0x110>)
 8000e0c:	705a      	strb	r2, [r3, #1]
	//dig_3 = (dig_val/100)%10;
	SET_val[2] = 46;
 8000e0e:	4b22      	ldr	r3, [pc, #136]	; (8000e98 <fsplit+0x110>)
 8000e10:	222e      	movs	r2, #46	; 0x2e
 8000e12:	709a      	strb	r2, [r3, #2]
	dig_2 = (dig_val/10)%10;
 8000e14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e18:	4a1d      	ldr	r2, [pc, #116]	; (8000e90 <fsplit+0x108>)
 8000e1a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e1e:	1092      	asrs	r2, r2, #2
 8000e20:	17db      	asrs	r3, r3, #31
 8000e22:	1ad3      	subs	r3, r2, r3
 8000e24:	b21a      	sxth	r2, r3
 8000e26:	4b1a      	ldr	r3, [pc, #104]	; (8000e90 <fsplit+0x108>)
 8000e28:	fb83 1302 	smull	r1, r3, r3, r2
 8000e2c:	1099      	asrs	r1, r3, #2
 8000e2e:	17d3      	asrs	r3, r2, #31
 8000e30:	1ac9      	subs	r1, r1, r3
 8000e32:	460b      	mov	r3, r1
 8000e34:	009b      	lsls	r3, r3, #2
 8000e36:	440b      	add	r3, r1
 8000e38:	005b      	lsls	r3, r3, #1
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	b21a      	sxth	r2, r3
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <fsplit+0x11c>)
 8000e40:	801a      	strh	r2, [r3, #0]
	SET_val[3] = dig_2 + 48;
 8000e42:	4b18      	ldr	r3, [pc, #96]	; (8000ea4 <fsplit+0x11c>)
 8000e44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	3330      	adds	r3, #48	; 0x30
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4b12      	ldr	r3, [pc, #72]	; (8000e98 <fsplit+0x110>)
 8000e50:	70da      	strb	r2, [r3, #3]
	dig_1 = (dig_val/1)%10;
 8000e52:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000e56:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <fsplit+0x108>)
 8000e58:	fb83 1302 	smull	r1, r3, r3, r2
 8000e5c:	1099      	asrs	r1, r3, #2
 8000e5e:	17d3      	asrs	r3, r2, #31
 8000e60:	1ac9      	subs	r1, r1, r3
 8000e62:	460b      	mov	r3, r1
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	440b      	add	r3, r1
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	1ad3      	subs	r3, r2, r3
 8000e6c:	b21a      	sxth	r2, r3
 8000e6e:	4b0e      	ldr	r3, [pc, #56]	; (8000ea8 <fsplit+0x120>)
 8000e70:	801a      	strh	r2, [r3, #0]
	SET_val[4] = dig_1 + 48;
 8000e72:	4b0d      	ldr	r3, [pc, #52]	; (8000ea8 <fsplit+0x120>)
 8000e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	3330      	adds	r3, #48	; 0x30
 8000e7c:	b2da      	uxtb	r2, r3
 8000e7e:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <fsplit+0x110>)
 8000e80:	711a      	strb	r2, [r3, #4]
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bc80      	pop	{r7}
 8000e8a:	4770      	bx	lr
 8000e8c:	10624dd3 	.word	0x10624dd3
 8000e90:	66666667 	.word	0x66666667
 8000e94:	2000008a 	.word	0x2000008a
 8000e98:	2000008c 	.word	0x2000008c
 8000e9c:	51eb851f 	.word	0x51eb851f
 8000ea0:	20000088 	.word	0x20000088
 8000ea4:	20000092 	.word	0x20000092
 8000ea8:	20000094 	.word	0x20000094

08000eac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eb0:	b672      	cpsid	i
}
 8000eb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <Error_Handler+0x8>
	...

08000eb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b085      	sub	sp, #20
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8000ebe:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <HAL_MspInit+0x58>)
 8000ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec2:	4a13      	ldr	r2, [pc, #76]	; (8000f10 <HAL_MspInit+0x58>)
 8000ec4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ec8:	6253      	str	r3, [r2, #36]	; 0x24
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <HAL_MspInit+0x58>)
 8000ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ece:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000ed2:	60fb      	str	r3, [r7, #12]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <HAL_MspInit+0x58>)
 8000ed8:	6a1b      	ldr	r3, [r3, #32]
 8000eda:	4a0d      	ldr	r2, [pc, #52]	; (8000f10 <HAL_MspInit+0x58>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6213      	str	r3, [r2, #32]
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <HAL_MspInit+0x58>)
 8000ee4:	6a1b      	ldr	r3, [r3, #32]
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	60bb      	str	r3, [r7, #8]
 8000eec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <HAL_MspInit+0x58>)
 8000ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef2:	4a07      	ldr	r2, [pc, #28]	; (8000f10 <HAL_MspInit+0x58>)
 8000ef4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef8:	6253      	str	r3, [r2, #36]	; 0x24
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_MspInit+0x58>)
 8000efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f06:	bf00      	nop
 8000f08:	3714      	adds	r7, #20
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	40023800 	.word	0x40023800

08000f14 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	; 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a17      	ldr	r2, [pc, #92]	; (8000f90 <HAL_I2C_MspInit+0x7c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d127      	bne.n	8000f86 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f36:	4b17      	ldr	r3, [pc, #92]	; (8000f94 <HAL_I2C_MspInit+0x80>)
 8000f38:	69db      	ldr	r3, [r3, #28]
 8000f3a:	4a16      	ldr	r2, [pc, #88]	; (8000f94 <HAL_I2C_MspInit+0x80>)
 8000f3c:	f043 0302 	orr.w	r3, r3, #2
 8000f40:	61d3      	str	r3, [r2, #28]
 8000f42:	4b14      	ldr	r3, [pc, #80]	; (8000f94 <HAL_I2C_MspInit+0x80>)
 8000f44:	69db      	ldr	r3, [r3, #28]
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000f4e:	23c0      	movs	r3, #192	; 0xc0
 8000f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f52:	2312      	movs	r3, #18
 8000f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f56:	2301      	movs	r3, #1
 8000f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5a:	2303      	movs	r3, #3
 8000f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f5e:	2304      	movs	r3, #4
 8000f60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	480b      	ldr	r0, [pc, #44]	; (8000f98 <HAL_I2C_MspInit+0x84>)
 8000f6a:	f000 fa29 	bl	80013c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f6e:	4b09      	ldr	r3, [pc, #36]	; (8000f94 <HAL_I2C_MspInit+0x80>)
 8000f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f72:	4a08      	ldr	r2, [pc, #32]	; (8000f94 <HAL_I2C_MspInit+0x80>)
 8000f74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f78:	6253      	str	r3, [r2, #36]	; 0x24
 8000f7a:	4b06      	ldr	r3, [pc, #24]	; (8000f94 <HAL_I2C_MspInit+0x80>)
 8000f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f82:	60fb      	str	r3, [r7, #12]
 8000f84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f86:	bf00      	nop
 8000f88:	3728      	adds	r7, #40	; 0x28
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}
 8000f8e:	bf00      	nop
 8000f90:	40005400 	.word	0x40005400
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40020400 	.word	0x40020400

08000f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b08a      	sub	sp, #40	; 0x28
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	2200      	movs	r2, #0
 8000faa:	601a      	str	r2, [r3, #0]
 8000fac:	605a      	str	r2, [r3, #4]
 8000fae:	609a      	str	r2, [r3, #8]
 8000fb0:	60da      	str	r2, [r3, #12]
 8000fb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a17      	ldr	r2, [pc, #92]	; (8001018 <HAL_UART_MspInit+0x7c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d128      	bne.n	8001010 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fbe:	4b17      	ldr	r3, [pc, #92]	; (800101c <HAL_UART_MspInit+0x80>)
 8000fc0:	6a1b      	ldr	r3, [r3, #32]
 8000fc2:	4a16      	ldr	r2, [pc, #88]	; (800101c <HAL_UART_MspInit+0x80>)
 8000fc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc8:	6213      	str	r3, [r2, #32]
 8000fca:	4b14      	ldr	r3, [pc, #80]	; (800101c <HAL_UART_MspInit+0x80>)
 8000fcc:	6a1b      	ldr	r3, [r3, #32]
 8000fce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fd2:	613b      	str	r3, [r7, #16]
 8000fd4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	4b11      	ldr	r3, [pc, #68]	; (800101c <HAL_UART_MspInit+0x80>)
 8000fd8:	69db      	ldr	r3, [r3, #28]
 8000fda:	4a10      	ldr	r2, [pc, #64]	; (800101c <HAL_UART_MspInit+0x80>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	61d3      	str	r3, [r2, #28]
 8000fe2:	4b0e      	ldr	r3, [pc, #56]	; (800101c <HAL_UART_MspInit+0x80>)
 8000fe4:	69db      	ldr	r3, [r3, #28]
 8000fe6:	f003 0301 	and.w	r3, r3, #1
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000ff2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ff4:	2302      	movs	r3, #2
 8000ff6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ffc:	2303      	movs	r3, #3
 8000ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001000:	2307      	movs	r3, #7
 8001002:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4619      	mov	r1, r3
 800100a:	4805      	ldr	r0, [pc, #20]	; (8001020 <HAL_UART_MspInit+0x84>)
 800100c:	f000 f9d8 	bl	80013c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001010:	bf00      	nop
 8001012:	3728      	adds	r7, #40	; 0x28
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40013800 	.word	0x40013800
 800101c:	40023800 	.word	0x40023800
 8001020:	40020000 	.word	0x40020000

08001024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001028:	e7fe      	b.n	8001028 <NMI_Handler+0x4>

0800102a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102e:	e7fe      	b.n	800102e <HardFault_Handler+0x4>

08001030 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001034:	e7fe      	b.n	8001034 <MemManage_Handler+0x4>

08001036 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800103a:	e7fe      	b.n	800103a <BusFault_Handler+0x4>

0800103c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001040:	e7fe      	b.n	8001040 <UsageFault_Handler+0x4>

08001042 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001046:	bf00      	nop
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr

0800104e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104e:	b480      	push	{r7}
 8001050:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001052:	bf00      	nop
 8001054:	46bd      	mov	sp, r7
 8001056:	bc80      	pop	{r7}
 8001058:	4770      	bx	lr

0800105a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr

08001066 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001066:	b580      	push	{r7, lr}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800106a:	f000 f887 	bl	800117c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <SystemInit+0x14>)
 800107a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800107e:	609a      	str	r2, [r3, #8]
#endif
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr
 8001088:	e000ed00 	.word	0xe000ed00

0800108c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 800108c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800108e:	e003      	b.n	8001098 <LoopCopyDataInit>

08001090 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001090:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001092:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001094:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001096:	3104      	adds	r1, #4

08001098 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001098:	480a      	ldr	r0, [pc, #40]	; (80010c4 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800109a:	4b0b      	ldr	r3, [pc, #44]	; (80010c8 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800109c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800109e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80010a0:	d3f6      	bcc.n	8001090 <CopyDataInit>
  ldr r2, =_sbss
 80010a2:	4a0a      	ldr	r2, [pc, #40]	; (80010cc <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80010a4:	e002      	b.n	80010ac <LoopFillZerobss>

080010a6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80010a6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80010a8:	f842 3b04 	str.w	r3, [r2], #4

080010ac <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80010ac:	4b08      	ldr	r3, [pc, #32]	; (80010d0 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80010ae:	429a      	cmp	r2, r3
  bcc FillZerobss
 80010b0:	d3f9      	bcc.n	80010a6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010b2:	f7ff ffdf 	bl	8001074 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010b6:	f002 fa57 	bl	8003568 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010ba:	f7ff fcb7 	bl	8000a2c <main>
  bx lr
 80010be:	4770      	bx	lr
  ldr r3, =_sidata
 80010c0:	0800369c 	.word	0x0800369c
  ldr r0, =_sdata
 80010c4:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80010c8:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80010cc:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80010d0:	200000e0 	.word	0x200000e0

080010d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010d4:	e7fe      	b.n	80010d4 <ADC1_IRQHandler>

080010d6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d6:	b580      	push	{r7, lr}
 80010d8:	b082      	sub	sp, #8
 80010da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010dc:	2300      	movs	r3, #0
 80010de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010e0:	2003      	movs	r0, #3
 80010e2:	f000 f939 	bl	8001358 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010e6:	2000      	movs	r0, #0
 80010e8:	f000 f80e 	bl	8001108 <HAL_InitTick>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d002      	beq.n	80010f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80010f2:	2301      	movs	r3, #1
 80010f4:	71fb      	strb	r3, [r7, #7]
 80010f6:	e001      	b.n	80010fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80010f8:	f7ff fede 	bl	8000eb8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010fc:	79fb      	ldrb	r3, [r7, #7]
}
 80010fe:	4618      	mov	r0, r3
 8001100:	3708      	adds	r7, #8
 8001102:	46bd      	mov	sp, r7
 8001104:	bd80      	pop	{r7, pc}
	...

08001108 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b084      	sub	sp, #16
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001110:	2300      	movs	r3, #0
 8001112:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001114:	4b16      	ldr	r3, [pc, #88]	; (8001170 <HAL_InitTick+0x68>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d022      	beq.n	8001162 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800111c:	4b15      	ldr	r3, [pc, #84]	; (8001174 <HAL_InitTick+0x6c>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b13      	ldr	r3, [pc, #76]	; (8001170 <HAL_InitTick+0x68>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001128:	fbb1 f3f3 	udiv	r3, r1, r3
 800112c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001130:	4618      	mov	r0, r3
 8001132:	f000 f938 	bl	80013a6 <HAL_SYSTICK_Config>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d10f      	bne.n	800115c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	2b0f      	cmp	r3, #15
 8001140:	d809      	bhi.n	8001156 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001142:	2200      	movs	r2, #0
 8001144:	6879      	ldr	r1, [r7, #4]
 8001146:	f04f 30ff 	mov.w	r0, #4294967295
 800114a:	f000 f910 	bl	800136e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800114e:	4a0a      	ldr	r2, [pc, #40]	; (8001178 <HAL_InitTick+0x70>)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	6013      	str	r3, [r2, #0]
 8001154:	e007      	b.n	8001166 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	73fb      	strb	r3, [r7, #15]
 800115a:	e004      	b.n	8001166 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	73fb      	strb	r3, [r7, #15]
 8001160:	e001      	b.n	8001166 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001166:	7bfb      	ldrb	r3, [r7, #15]
}
 8001168:	4618      	mov	r0, r3
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	2000000c 	.word	0x2000000c
 8001174:	20000004 	.word	0x20000004
 8001178:	20000008 	.word	0x20000008

0800117c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001180:	4b05      	ldr	r3, [pc, #20]	; (8001198 <HAL_IncTick+0x1c>)
 8001182:	681a      	ldr	r2, [r3, #0]
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <HAL_IncTick+0x20>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4413      	add	r3, r2
 800118a:	4a03      	ldr	r2, [pc, #12]	; (8001198 <HAL_IncTick+0x1c>)
 800118c:	6013      	str	r3, [r2, #0]
}
 800118e:	bf00      	nop
 8001190:	46bd      	mov	sp, r7
 8001192:	bc80      	pop	{r7}
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	200000dc 	.word	0x200000dc
 800119c:	2000000c 	.word	0x2000000c

080011a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  return uwTick;
 80011a4:	4b02      	ldr	r3, [pc, #8]	; (80011b0 <HAL_GetTick+0x10>)
 80011a6:	681b      	ldr	r3, [r3, #0]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bc80      	pop	{r7}
 80011ae:	4770      	bx	lr
 80011b0:	200000dc 	.word	0x200000dc

080011b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011bc:	f7ff fff0 	bl	80011a0 <HAL_GetTick>
 80011c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011cc:	d004      	beq.n	80011d8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ce:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <HAL_Delay+0x40>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	68fa      	ldr	r2, [r7, #12]
 80011d4:	4413      	add	r3, r2
 80011d6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011d8:	bf00      	nop
 80011da:	f7ff ffe1 	bl	80011a0 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	68fa      	ldr	r2, [r7, #12]
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d8f7      	bhi.n	80011da <HAL_Delay+0x26>
  {
  }
}
 80011ea:	bf00      	nop
 80011ec:	bf00      	nop
 80011ee:	3710      	adds	r7, #16
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bd80      	pop	{r7, pc}
 80011f4:	2000000c 	.word	0x2000000c

080011f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001208:	4b0c      	ldr	r3, [pc, #48]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800120e:	68ba      	ldr	r2, [r7, #8]
 8001210:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001214:	4013      	ands	r3, r2
 8001216:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001220:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001224:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001228:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800122a:	4a04      	ldr	r2, [pc, #16]	; (800123c <__NVIC_SetPriorityGrouping+0x44>)
 800122c:	68bb      	ldr	r3, [r7, #8]
 800122e:	60d3      	str	r3, [r2, #12]
}
 8001230:	bf00      	nop
 8001232:	3714      	adds	r7, #20
 8001234:	46bd      	mov	sp, r7
 8001236:	bc80      	pop	{r7}
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001244:	4b04      	ldr	r3, [pc, #16]	; (8001258 <__NVIC_GetPriorityGrouping+0x18>)
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	0a1b      	lsrs	r3, r3, #8
 800124a:	f003 0307 	and.w	r3, r3, #7
}
 800124e:	4618      	mov	r0, r3
 8001250:	46bd      	mov	sp, r7
 8001252:	bc80      	pop	{r7}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	e000ed00 	.word	0xe000ed00

0800125c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	6039      	str	r1, [r7, #0]
 8001266:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001268:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126c:	2b00      	cmp	r3, #0
 800126e:	db0a      	blt.n	8001286 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	b2da      	uxtb	r2, r3
 8001274:	490c      	ldr	r1, [pc, #48]	; (80012a8 <__NVIC_SetPriority+0x4c>)
 8001276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800127a:	0112      	lsls	r2, r2, #4
 800127c:	b2d2      	uxtb	r2, r2
 800127e:	440b      	add	r3, r1
 8001280:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001284:	e00a      	b.n	800129c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	b2da      	uxtb	r2, r3
 800128a:	4908      	ldr	r1, [pc, #32]	; (80012ac <__NVIC_SetPriority+0x50>)
 800128c:	79fb      	ldrb	r3, [r7, #7]
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	3b04      	subs	r3, #4
 8001294:	0112      	lsls	r2, r2, #4
 8001296:	b2d2      	uxtb	r2, r2
 8001298:	440b      	add	r3, r1
 800129a:	761a      	strb	r2, [r3, #24]
}
 800129c:	bf00      	nop
 800129e:	370c      	adds	r7, #12
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bc80      	pop	{r7}
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	e000e100 	.word	0xe000e100
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b089      	sub	sp, #36	; 0x24
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	f003 0307 	and.w	r3, r3, #7
 80012c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012c4:	69fb      	ldr	r3, [r7, #28]
 80012c6:	f1c3 0307 	rsb	r3, r3, #7
 80012ca:	2b04      	cmp	r3, #4
 80012cc:	bf28      	it	cs
 80012ce:	2304      	movcs	r3, #4
 80012d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3304      	adds	r3, #4
 80012d6:	2b06      	cmp	r3, #6
 80012d8:	d902      	bls.n	80012e0 <NVIC_EncodePriority+0x30>
 80012da:	69fb      	ldr	r3, [r7, #28]
 80012dc:	3b03      	subs	r3, #3
 80012de:	e000      	b.n	80012e2 <NVIC_EncodePriority+0x32>
 80012e0:	2300      	movs	r3, #0
 80012e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e4:	f04f 32ff 	mov.w	r2, #4294967295
 80012e8:	69bb      	ldr	r3, [r7, #24]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43da      	mvns	r2, r3
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	401a      	ands	r2, r3
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f8:	f04f 31ff 	mov.w	r1, #4294967295
 80012fc:	697b      	ldr	r3, [r7, #20]
 80012fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001302:	43d9      	mvns	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	4313      	orrs	r3, r2
         );
}
 800130a:	4618      	mov	r0, r3
 800130c:	3724      	adds	r7, #36	; 0x24
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	3b01      	subs	r3, #1
 8001320:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001324:	d301      	bcc.n	800132a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001326:	2301      	movs	r3, #1
 8001328:	e00f      	b.n	800134a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132a:	4a0a      	ldr	r2, [pc, #40]	; (8001354 <SysTick_Config+0x40>)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	3b01      	subs	r3, #1
 8001330:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001332:	210f      	movs	r1, #15
 8001334:	f04f 30ff 	mov.w	r0, #4294967295
 8001338:	f7ff ff90 	bl	800125c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <SysTick_Config+0x40>)
 800133e:	2200      	movs	r2, #0
 8001340:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <SysTick_Config+0x40>)
 8001344:	2207      	movs	r2, #7
 8001346:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001348:	2300      	movs	r3, #0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	e000e010 	.word	0xe000e010

08001358 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff49 	bl	80011f8 <__NVIC_SetPriorityGrouping>
}
 8001366:	bf00      	nop
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}

0800136e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b086      	sub	sp, #24
 8001372:	af00      	add	r7, sp, #0
 8001374:	4603      	mov	r3, r0
 8001376:	60b9      	str	r1, [r7, #8]
 8001378:	607a      	str	r2, [r7, #4]
 800137a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800137c:	2300      	movs	r3, #0
 800137e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001380:	f7ff ff5e 	bl	8001240 <__NVIC_GetPriorityGrouping>
 8001384:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001386:	687a      	ldr	r2, [r7, #4]
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	6978      	ldr	r0, [r7, #20]
 800138c:	f7ff ff90 	bl	80012b0 <NVIC_EncodePriority>
 8001390:	4602      	mov	r2, r0
 8001392:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001396:	4611      	mov	r1, r2
 8001398:	4618      	mov	r0, r3
 800139a:	f7ff ff5f 	bl	800125c <__NVIC_SetPriority>
}
 800139e:	bf00      	nop
 80013a0:	3718      	adds	r7, #24
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}

080013a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013a6:	b580      	push	{r7, lr}
 80013a8:	b082      	sub	sp, #8
 80013aa:	af00      	add	r7, sp, #0
 80013ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013ae:	6878      	ldr	r0, [r7, #4]
 80013b0:	f7ff ffb0 	bl	8001314 <SysTick_Config>
 80013b4:	4603      	mov	r3, r0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
	...

080013c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b087      	sub	sp, #28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 80013d2:	2300      	movs	r3, #0
 80013d4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80013d6:	e160      	b.n	800169a <HAL_GPIO_Init+0x2da>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	681a      	ldr	r2, [r3, #0]
 80013dc:	2101      	movs	r1, #1
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	fa01 f303 	lsl.w	r3, r1, r3
 80013e4:	4013      	ands	r3, r2
 80013e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	f000 8152 	beq.w	8001694 <HAL_GPIO_Init+0x2d4>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d00b      	beq.n	8001410 <HAL_GPIO_Init+0x50>
 80013f8:	683b      	ldr	r3, [r7, #0]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b02      	cmp	r3, #2
 80013fe:	d007      	beq.n	8001410 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001404:	2b11      	cmp	r3, #17
 8001406:	d003      	beq.n	8001410 <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001408:	683b      	ldr	r3, [r7, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b12      	cmp	r3, #18
 800140e:	d130      	bne.n	8001472 <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001416:	697b      	ldr	r3, [r7, #20]
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	2203      	movs	r2, #3
 800141c:	fa02 f303 	lsl.w	r3, r2, r3
 8001420:	43db      	mvns	r3, r3
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	4013      	ands	r3, r2
 8001426:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	68da      	ldr	r2, [r3, #12]
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	693a      	ldr	r2, [r7, #16]
 8001436:	4313      	orrs	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	693a      	ldr	r2, [r7, #16]
 800143e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001446:	2201      	movs	r2, #1
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	43db      	mvns	r3, r3
 8001450:	693a      	ldr	r2, [r7, #16]
 8001452:	4013      	ands	r3, r2
 8001454:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	091b      	lsrs	r3, r3, #4
 800145c:	f003 0201 	and.w	r2, r3, #1
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	fa02 f303 	lsl.w	r3, r2, r3
 8001466:	693a      	ldr	r2, [r7, #16]
 8001468:	4313      	orrs	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	68db      	ldr	r3, [r3, #12]
 8001476:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	2203      	movs	r2, #3
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43db      	mvns	r3, r3
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	4013      	ands	r3, r2
 8001488:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	689a      	ldr	r2, [r3, #8]
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	4313      	orrs	r3, r2
 800149a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d003      	beq.n	80014b2 <HAL_GPIO_Init+0xf2>
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b12      	cmp	r3, #18
 80014b0:	d123      	bne.n	80014fa <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	08da      	lsrs	r2, r3, #3
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	3208      	adds	r2, #8
 80014ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80014be:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	f003 0307 	and.w	r3, r3, #7
 80014c6:	009b      	lsls	r3, r3, #2
 80014c8:	220f      	movs	r2, #15
 80014ca:	fa02 f303 	lsl.w	r3, r2, r3
 80014ce:	43db      	mvns	r3, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	4013      	ands	r3, r2
 80014d4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	691a      	ldr	r2, [r3, #16]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	f003 0307 	and.w	r3, r3, #7
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	08da      	lsrs	r2, r3, #3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3208      	adds	r2, #8
 80014f4:	6939      	ldr	r1, [r7, #16]
 80014f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	2203      	movs	r2, #3
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 0203 	and.w	r2, r3, #3
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	4313      	orrs	r3, r2
 8001526:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	693a      	ldr	r2, [r7, #16]
 800152c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	f000 80ac 	beq.w	8001694 <HAL_GPIO_Init+0x2d4>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153c:	4b5e      	ldr	r3, [pc, #376]	; (80016b8 <HAL_GPIO_Init+0x2f8>)
 800153e:	6a1b      	ldr	r3, [r3, #32]
 8001540:	4a5d      	ldr	r2, [pc, #372]	; (80016b8 <HAL_GPIO_Init+0x2f8>)
 8001542:	f043 0301 	orr.w	r3, r3, #1
 8001546:	6213      	str	r3, [r2, #32]
 8001548:	4b5b      	ldr	r3, [pc, #364]	; (80016b8 <HAL_GPIO_Init+0x2f8>)
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	f003 0301 	and.w	r3, r3, #1
 8001550:	60bb      	str	r3, [r7, #8]
 8001552:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001554:	4a59      	ldr	r2, [pc, #356]	; (80016bc <HAL_GPIO_Init+0x2fc>)
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	089b      	lsrs	r3, r3, #2
 800155a:	3302      	adds	r3, #2
 800155c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001560:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	220f      	movs	r2, #15
 800156c:	fa02 f303 	lsl.w	r3, r2, r3
 8001570:	43db      	mvns	r3, r3
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	4013      	ands	r3, r2
 8001576:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	4a51      	ldr	r2, [pc, #324]	; (80016c0 <HAL_GPIO_Init+0x300>)
 800157c:	4293      	cmp	r3, r2
 800157e:	d025      	beq.n	80015cc <HAL_GPIO_Init+0x20c>
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	4a50      	ldr	r2, [pc, #320]	; (80016c4 <HAL_GPIO_Init+0x304>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d01f      	beq.n	80015c8 <HAL_GPIO_Init+0x208>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	4a4f      	ldr	r2, [pc, #316]	; (80016c8 <HAL_GPIO_Init+0x308>)
 800158c:	4293      	cmp	r3, r2
 800158e:	d019      	beq.n	80015c4 <HAL_GPIO_Init+0x204>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	4a4e      	ldr	r2, [pc, #312]	; (80016cc <HAL_GPIO_Init+0x30c>)
 8001594:	4293      	cmp	r3, r2
 8001596:	d013      	beq.n	80015c0 <HAL_GPIO_Init+0x200>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a4d      	ldr	r2, [pc, #308]	; (80016d0 <HAL_GPIO_Init+0x310>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d00d      	beq.n	80015bc <HAL_GPIO_Init+0x1fc>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a4c      	ldr	r2, [pc, #304]	; (80016d4 <HAL_GPIO_Init+0x314>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d007      	beq.n	80015b8 <HAL_GPIO_Init+0x1f8>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a4b      	ldr	r2, [pc, #300]	; (80016d8 <HAL_GPIO_Init+0x318>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d101      	bne.n	80015b4 <HAL_GPIO_Init+0x1f4>
 80015b0:	2306      	movs	r3, #6
 80015b2:	e00c      	b.n	80015ce <HAL_GPIO_Init+0x20e>
 80015b4:	2307      	movs	r3, #7
 80015b6:	e00a      	b.n	80015ce <HAL_GPIO_Init+0x20e>
 80015b8:	2305      	movs	r3, #5
 80015ba:	e008      	b.n	80015ce <HAL_GPIO_Init+0x20e>
 80015bc:	2304      	movs	r3, #4
 80015be:	e006      	b.n	80015ce <HAL_GPIO_Init+0x20e>
 80015c0:	2303      	movs	r3, #3
 80015c2:	e004      	b.n	80015ce <HAL_GPIO_Init+0x20e>
 80015c4:	2302      	movs	r3, #2
 80015c6:	e002      	b.n	80015ce <HAL_GPIO_Init+0x20e>
 80015c8:	2301      	movs	r3, #1
 80015ca:	e000      	b.n	80015ce <HAL_GPIO_Init+0x20e>
 80015cc:	2300      	movs	r3, #0
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	f002 0203 	and.w	r2, r2, #3
 80015d4:	0092      	lsls	r2, r2, #2
 80015d6:	4093      	lsls	r3, r2
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	4313      	orrs	r3, r2
 80015dc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80015de:	4937      	ldr	r1, [pc, #220]	; (80016bc <HAL_GPIO_Init+0x2fc>)
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	089b      	lsrs	r3, r3, #2
 80015e4:	3302      	adds	r3, #2
 80015e6:	693a      	ldr	r2, [r7, #16]
 80015e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015ec:	4b3b      	ldr	r3, [pc, #236]	; (80016dc <HAL_GPIO_Init+0x31c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(temp, iocurrent);
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001610:	4a32      	ldr	r2, [pc, #200]	; (80016dc <HAL_GPIO_Init+0x31c>)
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001616:	4b31      	ldr	r3, [pc, #196]	; (80016dc <HAL_GPIO_Init+0x31c>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	43db      	mvns	r3, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x27a>
        {
          SET_BIT(temp, iocurrent);
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800163a:	4a28      	ldr	r2, [pc, #160]	; (80016dc <HAL_GPIO_Init+0x31c>)
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001640:	4b26      	ldr	r3, [pc, #152]	; (80016dc <HAL_GPIO_Init+0x31c>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	43db      	mvns	r3, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x2a4>
        {
          SET_BIT(temp, iocurrent);
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001664:	4a1d      	ldr	r2, [pc, #116]	; (80016dc <HAL_GPIO_Init+0x31c>)
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800166a:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <HAL_GPIO_Init+0x31c>)
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	43db      	mvns	r3, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x2ce>
        {
          SET_BIT(temp, iocurrent);
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4313      	orrs	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800168e:	4a13      	ldr	r2, [pc, #76]	; (80016dc <HAL_GPIO_Init+0x31c>)
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	3301      	adds	r3, #1
 8001698:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681a      	ldr	r2, [r3, #0]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	fa22 f303 	lsr.w	r3, r2, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	f47f ae97 	bne.w	80013d8 <HAL_GPIO_Init+0x18>
  }
}
 80016aa:	bf00      	nop
 80016ac:	bf00      	nop
 80016ae:	371c      	adds	r7, #28
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
 80016b6:	bf00      	nop
 80016b8:	40023800 	.word	0x40023800
 80016bc:	40010000 	.word	0x40010000
 80016c0:	40020000 	.word	0x40020000
 80016c4:	40020400 	.word	0x40020400
 80016c8:	40020800 	.word	0x40020800
 80016cc:	40020c00 	.word	0x40020c00
 80016d0:	40021000 	.word	0x40021000
 80016d4:	40021400 	.word	0x40021400
 80016d8:	40021800 	.word	0x40021800
 80016dc:	40010400 	.word	0x40010400

080016e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d101      	bne.n	80016f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016ee:	2301      	movs	r3, #1
 80016f0:	e12b      	b.n	800194a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d106      	bne.n	800170c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2200      	movs	r2, #0
 8001702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	f7ff fc04 	bl	8000f14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2224      	movs	r2, #36	; 0x24
 8001710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	681a      	ldr	r2, [r3, #0]
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f022 0201 	bic.w	r2, r2, #1
 8001722:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	681a      	ldr	r2, [r3, #0]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001732:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001742:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001744:	f001 fc74 	bl	8003030 <HAL_RCC_GetPCLK1Freq>
 8001748:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4a81      	ldr	r2, [pc, #516]	; (8001954 <HAL_I2C_Init+0x274>)
 8001750:	4293      	cmp	r3, r2
 8001752:	d807      	bhi.n	8001764 <HAL_I2C_Init+0x84>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4a80      	ldr	r2, [pc, #512]	; (8001958 <HAL_I2C_Init+0x278>)
 8001758:	4293      	cmp	r3, r2
 800175a:	bf94      	ite	ls
 800175c:	2301      	movls	r3, #1
 800175e:	2300      	movhi	r3, #0
 8001760:	b2db      	uxtb	r3, r3
 8001762:	e006      	b.n	8001772 <HAL_I2C_Init+0x92>
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	4a7d      	ldr	r2, [pc, #500]	; (800195c <HAL_I2C_Init+0x27c>)
 8001768:	4293      	cmp	r3, r2
 800176a:	bf94      	ite	ls
 800176c:	2301      	movls	r3, #1
 800176e:	2300      	movhi	r3, #0
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2b00      	cmp	r3, #0
 8001774:	d001      	beq.n	800177a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e0e7      	b.n	800194a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	4a78      	ldr	r2, [pc, #480]	; (8001960 <HAL_I2C_Init+0x280>)
 800177e:	fba2 2303 	umull	r2, r3, r2, r3
 8001782:	0c9b      	lsrs	r3, r3, #18
 8001784:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	68ba      	ldr	r2, [r7, #8]
 8001796:	430a      	orrs	r2, r1
 8001798:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6a1b      	ldr	r3, [r3, #32]
 80017a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	4a6a      	ldr	r2, [pc, #424]	; (8001954 <HAL_I2C_Init+0x274>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d802      	bhi.n	80017b4 <HAL_I2C_Init+0xd4>
 80017ae:	68bb      	ldr	r3, [r7, #8]
 80017b0:	3301      	adds	r3, #1
 80017b2:	e009      	b.n	80017c8 <HAL_I2C_Init+0xe8>
 80017b4:	68bb      	ldr	r3, [r7, #8]
 80017b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80017ba:	fb02 f303 	mul.w	r3, r2, r3
 80017be:	4a69      	ldr	r2, [pc, #420]	; (8001964 <HAL_I2C_Init+0x284>)
 80017c0:	fba2 2303 	umull	r2, r3, r2, r3
 80017c4:	099b      	lsrs	r3, r3, #6
 80017c6:	3301      	adds	r3, #1
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	6812      	ldr	r2, [r2, #0]
 80017cc:	430b      	orrs	r3, r1
 80017ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80017da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	685b      	ldr	r3, [r3, #4]
 80017e2:	495c      	ldr	r1, [pc, #368]	; (8001954 <HAL_I2C_Init+0x274>)
 80017e4:	428b      	cmp	r3, r1
 80017e6:	d819      	bhi.n	800181c <HAL_I2C_Init+0x13c>
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	1e59      	subs	r1, r3, #1
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80017f6:	1c59      	adds	r1, r3, #1
 80017f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80017fc:	400b      	ands	r3, r1
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d00a      	beq.n	8001818 <HAL_I2C_Init+0x138>
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	1e59      	subs	r1, r3, #1
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001810:	3301      	adds	r3, #1
 8001812:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001816:	e051      	b.n	80018bc <HAL_I2C_Init+0x1dc>
 8001818:	2304      	movs	r3, #4
 800181a:	e04f      	b.n	80018bc <HAL_I2C_Init+0x1dc>
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	2b00      	cmp	r3, #0
 8001822:	d111      	bne.n	8001848 <HAL_I2C_Init+0x168>
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	1e58      	subs	r0, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6859      	ldr	r1, [r3, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	005b      	lsls	r3, r3, #1
 8001830:	440b      	add	r3, r1
 8001832:	fbb0 f3f3 	udiv	r3, r0, r3
 8001836:	3301      	adds	r3, #1
 8001838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800183c:	2b00      	cmp	r3, #0
 800183e:	bf0c      	ite	eq
 8001840:	2301      	moveq	r3, #1
 8001842:	2300      	movne	r3, #0
 8001844:	b2db      	uxtb	r3, r3
 8001846:	e012      	b.n	800186e <HAL_I2C_Init+0x18e>
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	1e58      	subs	r0, r3, #1
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6859      	ldr	r1, [r3, #4]
 8001850:	460b      	mov	r3, r1
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	440b      	add	r3, r1
 8001856:	0099      	lsls	r1, r3, #2
 8001858:	440b      	add	r3, r1
 800185a:	fbb0 f3f3 	udiv	r3, r0, r3
 800185e:	3301      	adds	r3, #1
 8001860:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001864:	2b00      	cmp	r3, #0
 8001866:	bf0c      	ite	eq
 8001868:	2301      	moveq	r3, #1
 800186a:	2300      	movne	r3, #0
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	d001      	beq.n	8001876 <HAL_I2C_Init+0x196>
 8001872:	2301      	movs	r3, #1
 8001874:	e022      	b.n	80018bc <HAL_I2C_Init+0x1dc>
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d10e      	bne.n	800189c <HAL_I2C_Init+0x1bc>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	1e58      	subs	r0, r3, #1
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6859      	ldr	r1, [r3, #4]
 8001886:	460b      	mov	r3, r1
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	440b      	add	r3, r1
 800188c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001890:	3301      	adds	r3, #1
 8001892:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001896:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800189a:	e00f      	b.n	80018bc <HAL_I2C_Init+0x1dc>
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	1e58      	subs	r0, r3, #1
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6859      	ldr	r1, [r3, #4]
 80018a4:	460b      	mov	r3, r1
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	440b      	add	r3, r1
 80018aa:	0099      	lsls	r1, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80018b2:	3301      	adds	r3, #1
 80018b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018bc:	6879      	ldr	r1, [r7, #4]
 80018be:	6809      	ldr	r1, [r1, #0]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	69da      	ldr	r2, [r3, #28]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6a1b      	ldr	r3, [r3, #32]
 80018d6:	431a      	orrs	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80018ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80018ee:	687a      	ldr	r2, [r7, #4]
 80018f0:	6911      	ldr	r1, [r2, #16]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	68d2      	ldr	r2, [r2, #12]
 80018f6:	4311      	orrs	r1, r2
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	6812      	ldr	r2, [r2, #0]
 80018fc:	430b      	orrs	r3, r1
 80018fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68db      	ldr	r3, [r3, #12]
 8001906:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	695a      	ldr	r2, [r3, #20]
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f042 0201 	orr.w	r2, r2, #1
 800192a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2220      	movs	r2, #32
 8001936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3710      	adds	r7, #16
 800194e:	46bd      	mov	sp, r7
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	000186a0 	.word	0x000186a0
 8001958:	001e847f 	.word	0x001e847f
 800195c:	003d08ff 	.word	0x003d08ff
 8001960:	431bde83 	.word	0x431bde83
 8001964:	10624dd3 	.word	0x10624dd3

08001968 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b088      	sub	sp, #32
 800196c:	af02      	add	r7, sp, #8
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	607a      	str	r2, [r7, #4]
 8001972:	461a      	mov	r2, r3
 8001974:	460b      	mov	r3, r1
 8001976:	817b      	strh	r3, [r7, #10]
 8001978:	4613      	mov	r3, r2
 800197a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800197c:	f7ff fc10 	bl	80011a0 <HAL_GetTick>
 8001980:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001988:	b2db      	uxtb	r3, r3
 800198a:	2b20      	cmp	r3, #32
 800198c:	f040 80e0 	bne.w	8001b50 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2319      	movs	r3, #25
 8001996:	2201      	movs	r2, #1
 8001998:	4970      	ldr	r1, [pc, #448]	; (8001b5c <HAL_I2C_Master_Transmit+0x1f4>)
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 fc58 	bl	8002250 <I2C_WaitOnFlagUntilTimeout>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80019a6:	2302      	movs	r3, #2
 80019a8:	e0d3      	b.n	8001b52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80019b0:	2b01      	cmp	r3, #1
 80019b2:	d101      	bne.n	80019b8 <HAL_I2C_Master_Transmit+0x50>
 80019b4:	2302      	movs	r3, #2
 80019b6:	e0cc      	b.n	8001b52 <HAL_I2C_Master_Transmit+0x1ea>
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	2201      	movs	r2, #1
 80019bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d007      	beq.n	80019de <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	681a      	ldr	r2, [r3, #0]
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f042 0201 	orr.w	r2, r2, #1
 80019dc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019ec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	2221      	movs	r2, #33	; 0x21
 80019f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	2210      	movs	r2, #16
 80019fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2200      	movs	r2, #0
 8001a02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	687a      	ldr	r2, [r7, #4]
 8001a08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	893a      	ldrh	r2, [r7, #8]
 8001a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	4a50      	ldr	r2, [pc, #320]	; (8001b60 <HAL_I2C_Master_Transmit+0x1f8>)
 8001a1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001a20:	8979      	ldrh	r1, [r7, #10]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	6a3a      	ldr	r2, [r7, #32]
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f000 fac2 	bl	8001fb0 <I2C_MasterRequestWrite>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e08d      	b.n	8001b52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	699b      	ldr	r3, [r3, #24]
 8001a48:	613b      	str	r3, [r7, #16]
 8001a4a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001a4c:	e066      	b.n	8001b1c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001a4e:	697a      	ldr	r2, [r7, #20]
 8001a50:	6a39      	ldr	r1, [r7, #32]
 8001a52:	68f8      	ldr	r0, [r7, #12]
 8001a54:	f000 fcd2 	bl	80023fc <I2C_WaitOnTXEFlagUntilTimeout>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d00d      	beq.n	8001a7a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d107      	bne.n	8001a76 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e06b      	b.n	8001b52 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7e:	781a      	ldrb	r2, [r3, #0]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	3b01      	subs	r3, #1
 8001a98:	b29a      	uxth	r2, r3
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	695b      	ldr	r3, [r3, #20]
 8001ab0:	f003 0304 	and.w	r3, r3, #4
 8001ab4:	2b04      	cmp	r3, #4
 8001ab6:	d11b      	bne.n	8001af0 <HAL_I2C_Master_Transmit+0x188>
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d017      	beq.n	8001af0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac4:	781a      	ldrb	r2, [r3, #0]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ad0:	1c5a      	adds	r2, r3, #1
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ada:	b29b      	uxth	r3, r3
 8001adc:	3b01      	subs	r3, #1
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ae8:	3b01      	subs	r3, #1
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	6a39      	ldr	r1, [r7, #32]
 8001af4:	68f8      	ldr	r0, [r7, #12]
 8001af6:	f000 fcc2 	bl	800247e <I2C_WaitOnBTFFlagUntilTimeout>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d00d      	beq.n	8001b1c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b04:	2b04      	cmp	r3, #4
 8001b06:	d107      	bne.n	8001b18 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	681a      	ldr	r2, [r3, #0]
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e01a      	b.n	8001b52 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d194      	bne.n	8001a4e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2220      	movs	r2, #32
 8001b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2200      	movs	r2, #0
 8001b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	e000      	b.n	8001b52 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001b50:	2302      	movs	r3, #2
  }
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	3718      	adds	r7, #24
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	00100002 	.word	0x00100002
 8001b60:	ffff0000 	.word	0xffff0000

08001b64 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08c      	sub	sp, #48	; 0x30
 8001b68:	af02      	add	r7, sp, #8
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	607a      	str	r2, [r7, #4]
 8001b6e:	461a      	mov	r2, r3
 8001b70:	460b      	mov	r3, r1
 8001b72:	817b      	strh	r3, [r7, #10]
 8001b74:	4613      	mov	r3, r2
 8001b76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001b78:	f7ff fb12 	bl	80011a0 <HAL_GetTick>
 8001b7c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b20      	cmp	r3, #32
 8001b88:	f040 820b 	bne.w	8001fa2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	2319      	movs	r3, #25
 8001b92:	2201      	movs	r2, #1
 8001b94:	497c      	ldr	r1, [pc, #496]	; (8001d88 <HAL_I2C_Master_Receive+0x224>)
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f000 fb5a 	bl	8002250 <I2C_WaitOnFlagUntilTimeout>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8001ba2:	2302      	movs	r3, #2
 8001ba4:	e1fe      	b.n	8001fa4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d101      	bne.n	8001bb4 <HAL_I2C_Master_Receive+0x50>
 8001bb0:	2302      	movs	r3, #2
 8001bb2:	e1f7      	b.n	8001fa4 <HAL_I2C_Master_Receive+0x440>
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d007      	beq.n	8001bda <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f042 0201 	orr.w	r2, r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	681a      	ldr	r2, [r3, #0]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001be8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2222      	movs	r2, #34	; 0x22
 8001bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	2210      	movs	r2, #16
 8001bf6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	893a      	ldrh	r2, [r7, #8]
 8001c0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	4a5c      	ldr	r2, [pc, #368]	; (8001d8c <HAL_I2C_Master_Receive+0x228>)
 8001c1a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001c1c:	8979      	ldrh	r1, [r7, #10]
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 fa46 	bl	80020b4 <I2C_MasterRequestRead>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e1b8      	b.n	8001fa4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d113      	bne.n	8001c62 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	623b      	str	r3, [r7, #32]
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	623b      	str	r3, [r7, #32]
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	699b      	ldr	r3, [r3, #24]
 8001c4c:	623b      	str	r3, [r7, #32]
 8001c4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	e18c      	b.n	8001f7c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d11b      	bne.n	8001ca2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	61fb      	str	r3, [r7, #28]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	699b      	ldr	r3, [r3, #24]
 8001c8c:	61fb      	str	r3, [r7, #28]
 8001c8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c9e:	601a      	str	r2, [r3, #0]
 8001ca0:	e16c      	b.n	8001f7c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d11b      	bne.n	8001ce2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001cb8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	681a      	ldr	r2, [r3, #0]
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001cc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	61bb      	str	r3, [r7, #24]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	61bb      	str	r3, [r7, #24]
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	e14c      	b.n	8001f7c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001cf0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	695b      	ldr	r3, [r3, #20]
 8001cfc:	617b      	str	r3, [r7, #20]
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	699b      	ldr	r3, [r3, #24]
 8001d04:	617b      	str	r3, [r7, #20]
 8001d06:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8001d08:	e138      	b.n	8001f7c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d0e:	2b03      	cmp	r3, #3
 8001d10:	f200 80f1 	bhi.w	8001ef6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d123      	bne.n	8001d64 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d1e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001d20:	68f8      	ldr	r0, [r7, #12]
 8001d22:	f000 fbed 	bl	8002500 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d001      	beq.n	8001d30 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e139      	b.n	8001fa4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	691a      	ldr	r2, [r3, #16]
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d3a:	b2d2      	uxtb	r2, r2
 8001d3c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	1c5a      	adds	r2, r3, #1
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	b29a      	uxth	r2, r3
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d58:	b29b      	uxth	r3, r3
 8001d5a:	3b01      	subs	r3, #1
 8001d5c:	b29a      	uxth	r2, r3
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001d62:	e10b      	b.n	8001f7c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d14e      	bne.n	8001e0a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d72:	2200      	movs	r2, #0
 8001d74:	4906      	ldr	r1, [pc, #24]	; (8001d90 <HAL_I2C_Master_Receive+0x22c>)
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f000 fa6a 	bl	8002250 <I2C_WaitOnFlagUntilTimeout>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d008      	beq.n	8001d94 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e10e      	b.n	8001fa4 <HAL_I2C_Master_Receive+0x440>
 8001d86:	bf00      	nop
 8001d88:	00100002 	.word	0x00100002
 8001d8c:	ffff0000 	.word	0xffff0000
 8001d90:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	681a      	ldr	r2, [r3, #0]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001da2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	691a      	ldr	r2, [r3, #16]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dae:	b2d2      	uxtb	r2, r2
 8001db0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db6:	1c5a      	adds	r2, r3, #1
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dcc:	b29b      	uxth	r3, r3
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	b29a      	uxth	r2, r3
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	691a      	ldr	r2, [r3, #16]
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	b2d2      	uxtb	r2, r2
 8001de2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	1c5a      	adds	r2, r3, #1
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df2:	3b01      	subs	r3, #1
 8001df4:	b29a      	uxth	r2, r3
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dfe:	b29b      	uxth	r3, r3
 8001e00:	3b01      	subs	r3, #1
 8001e02:	b29a      	uxth	r2, r3
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001e08:	e0b8      	b.n	8001f7c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e10:	2200      	movs	r2, #0
 8001e12:	4966      	ldr	r1, [pc, #408]	; (8001fac <HAL_I2C_Master_Receive+0x448>)
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f000 fa1b 	bl	8002250 <I2C_WaitOnFlagUntilTimeout>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0bf      	b.n	8001fa4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001e32:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	691a      	ldr	r2, [r3, #16]
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e46:	1c5a      	adds	r2, r3, #1
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e50:	3b01      	subs	r3, #1
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e5c:	b29b      	uxth	r3, r3
 8001e5e:	3b01      	subs	r3, #1
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001e66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e68:	9300      	str	r3, [sp, #0]
 8001e6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	494f      	ldr	r1, [pc, #316]	; (8001fac <HAL_I2C_Master_Receive+0x448>)
 8001e70:	68f8      	ldr	r0, [r7, #12]
 8001e72:	f000 f9ed 	bl	8002250 <I2C_WaitOnFlagUntilTimeout>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d001      	beq.n	8001e80 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e091      	b.n	8001fa4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e8e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	691a      	ldr	r2, [r3, #16]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9a:	b2d2      	uxtb	r2, r2
 8001e9c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001eac:	3b01      	subs	r3, #1
 8001eae:	b29a      	uxth	r2, r3
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ecc:	b2d2      	uxtb	r2, r2
 8001ece:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed4:	1c5a      	adds	r2, r3, #1
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ede:	3b01      	subs	r3, #1
 8001ee0:	b29a      	uxth	r2, r3
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eea:	b29b      	uxth	r3, r3
 8001eec:	3b01      	subs	r3, #1
 8001eee:	b29a      	uxth	r2, r3
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001ef4:	e042      	b.n	8001f7c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001efa:	68f8      	ldr	r0, [r7, #12]
 8001efc:	f000 fb00 	bl	8002500 <I2C_WaitOnRXNEFlagUntilTimeout>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e04c      	b.n	8001fa4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	691a      	ldr	r2, [r3, #16]
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f14:	b2d2      	uxtb	r2, r2
 8001f16:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	1c5a      	adds	r2, r3, #1
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f26:	3b01      	subs	r3, #1
 8001f28:	b29a      	uxth	r2, r3
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	3b01      	subs	r3, #1
 8001f36:	b29a      	uxth	r2, r3
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	695b      	ldr	r3, [r3, #20]
 8001f42:	f003 0304 	and.w	r3, r3, #4
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d118      	bne.n	8001f7c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	691a      	ldr	r2, [r3, #16]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	b2d2      	uxtb	r2, r2
 8001f56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	1c5a      	adds	r2, r3, #1
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f66:	3b01      	subs	r3, #1
 8001f68:	b29a      	uxth	r2, r3
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	3b01      	subs	r3, #1
 8001f76:	b29a      	uxth	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f47f aec2 	bne.w	8001d0a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	2220      	movs	r2, #32
 8001f8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	e000      	b.n	8001fa4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001fa2:	2302      	movs	r3, #2
  }
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3728      	adds	r7, #40	; 0x28
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	00010004 	.word	0x00010004

08001fb0 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b088      	sub	sp, #32
 8001fb4:	af02      	add	r7, sp, #8
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	607a      	str	r2, [r7, #4]
 8001fba:	603b      	str	r3, [r7, #0]
 8001fbc:	460b      	mov	r3, r1
 8001fbe:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fc4:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001fc6:	697b      	ldr	r3, [r7, #20]
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d006      	beq.n	8001fda <I2C_MasterRequestWrite+0x2a>
 8001fcc:	697b      	ldr	r3, [r7, #20]
 8001fce:	2b01      	cmp	r3, #1
 8001fd0:	d003      	beq.n	8001fda <I2C_MasterRequestWrite+0x2a>
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001fd8:	d108      	bne.n	8001fec <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681a      	ldr	r2, [r3, #0]
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fe8:	601a      	str	r2, [r3, #0]
 8001fea:	e00b      	b.n	8002004 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff0:	2b12      	cmp	r3, #18
 8001ff2:	d107      	bne.n	8002004 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002002:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002010:	68f8      	ldr	r0, [r7, #12]
 8002012:	f000 f91d 	bl	8002250 <I2C_WaitOnFlagUntilTimeout>
 8002016:	4603      	mov	r3, r0
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00d      	beq.n	8002038 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002026:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800202a:	d103      	bne.n	8002034 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002032:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e035      	b.n	80020a4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	691b      	ldr	r3, [r3, #16]
 800203c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002040:	d108      	bne.n	8002054 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002042:	897b      	ldrh	r3, [r7, #10]
 8002044:	b2db      	uxtb	r3, r3
 8002046:	461a      	mov	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002050:	611a      	str	r2, [r3, #16]
 8002052:	e01b      	b.n	800208c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002054:	897b      	ldrh	r3, [r7, #10]
 8002056:	11db      	asrs	r3, r3, #7
 8002058:	b2db      	uxtb	r3, r3
 800205a:	f003 0306 	and.w	r3, r3, #6
 800205e:	b2db      	uxtb	r3, r3
 8002060:	f063 030f 	orn	r3, r3, #15
 8002064:	b2da      	uxtb	r2, r3
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	490e      	ldr	r1, [pc, #56]	; (80020ac <I2C_MasterRequestWrite+0xfc>)
 8002072:	68f8      	ldr	r0, [r7, #12]
 8002074:	f000 f943 	bl	80022fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002078:	4603      	mov	r3, r0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d001      	beq.n	8002082 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800207e:	2301      	movs	r3, #1
 8002080:	e010      	b.n	80020a4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002082:	897b      	ldrh	r3, [r7, #10]
 8002084:	b2da      	uxtb	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	4907      	ldr	r1, [pc, #28]	; (80020b0 <I2C_MasterRequestWrite+0x100>)
 8002092:	68f8      	ldr	r0, [r7, #12]
 8002094:	f000 f933 	bl	80022fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e000      	b.n	80020a4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80020a2:	2300      	movs	r3, #0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3718      	adds	r7, #24
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	00010008 	.word	0x00010008
 80020b0:	00010002 	.word	0x00010002

080020b4 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b088      	sub	sp, #32
 80020b8:	af02      	add	r7, sp, #8
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	607a      	str	r2, [r7, #4]
 80020be:	603b      	str	r3, [r7, #0]
 80020c0:	460b      	mov	r3, r1
 80020c2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020c8:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	681a      	ldr	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80020d8:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80020da:	697b      	ldr	r3, [r7, #20]
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d006      	beq.n	80020ee <I2C_MasterRequestRead+0x3a>
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d003      	beq.n	80020ee <I2C_MasterRequestRead+0x3a>
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80020ec:	d108      	bne.n	8002100 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80020fc:	601a      	str	r2, [r3, #0]
 80020fe:	e00b      	b.n	8002118 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002104:	2b11      	cmp	r3, #17
 8002106:	d107      	bne.n	8002118 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002116:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	9300      	str	r3, [sp, #0]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002124:	68f8      	ldr	r0, [r7, #12]
 8002126:	f000 f893 	bl	8002250 <I2C_WaitOnFlagUntilTimeout>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d00d      	beq.n	800214c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800213e:	d103      	bne.n	8002148 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002146:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e079      	b.n	8002240 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002154:	d108      	bne.n	8002168 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002156:	897b      	ldrh	r3, [r7, #10]
 8002158:	b2db      	uxtb	r3, r3
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	b2da      	uxtb	r2, r3
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	611a      	str	r2, [r3, #16]
 8002166:	e05f      	b.n	8002228 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002168:	897b      	ldrh	r3, [r7, #10]
 800216a:	11db      	asrs	r3, r3, #7
 800216c:	b2db      	uxtb	r3, r3
 800216e:	f003 0306 	and.w	r3, r3, #6
 8002172:	b2db      	uxtb	r3, r3
 8002174:	f063 030f 	orn	r3, r3, #15
 8002178:	b2da      	uxtb	r2, r3
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	687a      	ldr	r2, [r7, #4]
 8002184:	4930      	ldr	r1, [pc, #192]	; (8002248 <I2C_MasterRequestRead+0x194>)
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 f8b9 	bl	80022fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e054      	b.n	8002240 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002196:	897b      	ldrh	r3, [r7, #10]
 8002198:	b2da      	uxtb	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	4929      	ldr	r1, [pc, #164]	; (800224c <I2C_MasterRequestRead+0x198>)
 80021a6:	68f8      	ldr	r0, [r7, #12]
 80021a8:	f000 f8a9 	bl	80022fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80021ac:	4603      	mov	r3, r0
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d001      	beq.n	80021b6 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	e044      	b.n	8002240 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021b6:	2300      	movs	r3, #0
 80021b8:	613b      	str	r3, [r7, #16]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	695b      	ldr	r3, [r3, #20]
 80021c0:	613b      	str	r3, [r7, #16]
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	613b      	str	r3, [r7, #16]
 80021ca:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80021da:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	9300      	str	r3, [sp, #0]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80021e8:	68f8      	ldr	r0, [r7, #12]
 80021ea:	f000 f831 	bl	8002250 <I2C_WaitOnFlagUntilTimeout>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00d      	beq.n	8002210 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002202:	d103      	bne.n	800220c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f44f 7200 	mov.w	r2, #512	; 0x200
 800220a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	e017      	b.n	8002240 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002210:	897b      	ldrh	r3, [r7, #10]
 8002212:	11db      	asrs	r3, r3, #7
 8002214:	b2db      	uxtb	r3, r3
 8002216:	f003 0306 	and.w	r3, r3, #6
 800221a:	b2db      	uxtb	r3, r3
 800221c:	f063 030e 	orn	r3, r3, #14
 8002220:	b2da      	uxtb	r2, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	4907      	ldr	r1, [pc, #28]	; (800224c <I2C_MasterRequestRead+0x198>)
 800222e:	68f8      	ldr	r0, [r7, #12]
 8002230:	f000 f865 	bl	80022fe <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d001      	beq.n	800223e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800223a:	2301      	movs	r3, #1
 800223c:	e000      	b.n	8002240 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3718      	adds	r7, #24
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}
 8002248:	00010008 	.word	0x00010008
 800224c:	00010002 	.word	0x00010002

08002250 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	60f8      	str	r0, [r7, #12]
 8002258:	60b9      	str	r1, [r7, #8]
 800225a:	603b      	str	r3, [r7, #0]
 800225c:	4613      	mov	r3, r2
 800225e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002260:	e025      	b.n	80022ae <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002268:	d021      	beq.n	80022ae <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800226a:	f7fe ff99 	bl	80011a0 <HAL_GetTick>
 800226e:	4602      	mov	r2, r0
 8002270:	69bb      	ldr	r3, [r7, #24]
 8002272:	1ad3      	subs	r3, r2, r3
 8002274:	683a      	ldr	r2, [r7, #0]
 8002276:	429a      	cmp	r2, r3
 8002278:	d302      	bcc.n	8002280 <I2C_WaitOnFlagUntilTimeout+0x30>
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d116      	bne.n	80022ae <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	2200      	movs	r2, #0
 8002284:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2220      	movs	r2, #32
 800228a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2200      	movs	r2, #0
 8002292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	f043 0220 	orr.w	r2, r3, #32
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	2200      	movs	r2, #0
 80022a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e023      	b.n	80022f6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	0c1b      	lsrs	r3, r3, #16
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d10d      	bne.n	80022d4 <I2C_WaitOnFlagUntilTimeout+0x84>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	43da      	mvns	r2, r3
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	4013      	ands	r3, r2
 80022c4:	b29b      	uxth	r3, r3
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	bf0c      	ite	eq
 80022ca:	2301      	moveq	r3, #1
 80022cc:	2300      	movne	r3, #0
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	461a      	mov	r2, r3
 80022d2:	e00c      	b.n	80022ee <I2C_WaitOnFlagUntilTimeout+0x9e>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	699b      	ldr	r3, [r3, #24]
 80022da:	43da      	mvns	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	4013      	ands	r3, r2
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	bf0c      	ite	eq
 80022e6:	2301      	moveq	r3, #1
 80022e8:	2300      	movne	r3, #0
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	461a      	mov	r2, r3
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	429a      	cmp	r2, r3
 80022f2:	d0b6      	beq.n	8002262 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	3710      	adds	r7, #16
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80022fe:	b580      	push	{r7, lr}
 8002300:	b084      	sub	sp, #16
 8002302:	af00      	add	r7, sp, #0
 8002304:	60f8      	str	r0, [r7, #12]
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
 800230a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800230c:	e051      	b.n	80023b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	695b      	ldr	r3, [r3, #20]
 8002314:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002318:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800231c:	d123      	bne.n	8002366 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800232c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002336:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	2200      	movs	r2, #0
 800233c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	2220      	movs	r2, #32
 8002342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	2200      	movs	r2, #0
 800234a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002352:	f043 0204 	orr.w	r2, r3, #4
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e046      	b.n	80023f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800236c:	d021      	beq.n	80023b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800236e:	f7fe ff17 	bl	80011a0 <HAL_GetTick>
 8002372:	4602      	mov	r2, r0
 8002374:	683b      	ldr	r3, [r7, #0]
 8002376:	1ad3      	subs	r3, r2, r3
 8002378:	687a      	ldr	r2, [r7, #4]
 800237a:	429a      	cmp	r2, r3
 800237c:	d302      	bcc.n	8002384 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d116      	bne.n	80023b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2200      	movs	r2, #0
 8002388:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	2220      	movs	r2, #32
 800238e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	2200      	movs	r2, #0
 8002396:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239e:	f043 0220 	orr.w	r2, r3, #32
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e020      	b.n	80023f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	0c1b      	lsrs	r3, r3, #16
 80023b6:	b2db      	uxtb	r3, r3
 80023b8:	2b01      	cmp	r3, #1
 80023ba:	d10c      	bne.n	80023d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	695b      	ldr	r3, [r3, #20]
 80023c2:	43da      	mvns	r2, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	4013      	ands	r3, r2
 80023c8:	b29b      	uxth	r3, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	bf14      	ite	ne
 80023ce:	2301      	movne	r3, #1
 80023d0:	2300      	moveq	r3, #0
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	e00b      	b.n	80023ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	699b      	ldr	r3, [r3, #24]
 80023dc:	43da      	mvns	r2, r3
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	4013      	ands	r3, r2
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	bf14      	ite	ne
 80023e8:	2301      	movne	r3, #1
 80023ea:	2300      	moveq	r3, #0
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d18d      	bne.n	800230e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	3710      	adds	r7, #16
 80023f8:	46bd      	mov	sp, r7
 80023fa:	bd80      	pop	{r7, pc}

080023fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b084      	sub	sp, #16
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002408:	e02d      	b.n	8002466 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	f000 f8ce 	bl	80025ac <I2C_IsAcknowledgeFailed>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d001      	beq.n	800241a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e02d      	b.n	8002476 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002420:	d021      	beq.n	8002466 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002422:	f7fe febd 	bl	80011a0 <HAL_GetTick>
 8002426:	4602      	mov	r2, r0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	68ba      	ldr	r2, [r7, #8]
 800242e:	429a      	cmp	r2, r3
 8002430:	d302      	bcc.n	8002438 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d116      	bne.n	8002466 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2220      	movs	r2, #32
 8002442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	f043 0220 	orr.w	r2, r3, #32
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2200      	movs	r2, #0
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e007      	b.n	8002476 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	695b      	ldr	r3, [r3, #20]
 800246c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002470:	2b80      	cmp	r3, #128	; 0x80
 8002472:	d1ca      	bne.n	800240a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}

0800247e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b084      	sub	sp, #16
 8002482:	af00      	add	r7, sp, #0
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800248a:	e02d      	b.n	80024e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800248c:	68f8      	ldr	r0, [r7, #12]
 800248e:	f000 f88d 	bl	80025ac <I2C_IsAcknowledgeFailed>
 8002492:	4603      	mov	r3, r0
 8002494:	2b00      	cmp	r3, #0
 8002496:	d001      	beq.n	800249c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e02d      	b.n	80024f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024a2:	d021      	beq.n	80024e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024a4:	f7fe fe7c 	bl	80011a0 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d302      	bcc.n	80024ba <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d116      	bne.n	80024e8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2200      	movs	r2, #0
 80024be:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2220      	movs	r2, #32
 80024c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2200      	movs	r2, #0
 80024cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d4:	f043 0220 	orr.w	r2, r3, #32
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e007      	b.n	80024f8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	695b      	ldr	r3, [r3, #20]
 80024ee:	f003 0304 	and.w	r3, r3, #4
 80024f2:	2b04      	cmp	r3, #4
 80024f4:	d1ca      	bne.n	800248c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800250c:	e042      	b.n	8002594 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	695b      	ldr	r3, [r3, #20]
 8002514:	f003 0310 	and.w	r3, r3, #16
 8002518:	2b10      	cmp	r3, #16
 800251a:	d119      	bne.n	8002550 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f06f 0210 	mvn.w	r2, #16
 8002524:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	2200      	movs	r2, #0
 800252a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	2220      	movs	r2, #32
 8002530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	2200      	movs	r2, #0
 8002548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	e029      	b.n	80025a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002550:	f7fe fe26 	bl	80011a0 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	429a      	cmp	r2, r3
 800255e:	d302      	bcc.n	8002566 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d116      	bne.n	8002594 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2200      	movs	r2, #0
 800256a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	2220      	movs	r2, #32
 8002570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	2200      	movs	r2, #0
 8002578:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002580:	f043 0220 	orr.w	r2, r3, #32
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	e007      	b.n	80025a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	695b      	ldr	r3, [r3, #20]
 800259a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800259e:	2b40      	cmp	r3, #64	; 0x40
 80025a0:	d1b5      	bne.n	800250e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80025a2:	2300      	movs	r3, #0
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3710      	adds	r7, #16
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025c2:	d11b      	bne.n	80025fc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025cc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2220      	movs	r2, #32
 80025d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2200      	movs	r2, #0
 80025e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e8:	f043 0204 	orr.w	r2, r3, #4
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80025f8:	2301      	movs	r3, #1
 80025fa:	e000      	b.n	80025fe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b088      	sub	sp, #32
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	e31d      	b.n	8002c56 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800261a:	4b94      	ldr	r3, [pc, #592]	; (800286c <HAL_RCC_OscConfig+0x264>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	f003 030c 	and.w	r3, r3, #12
 8002622:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002624:	4b91      	ldr	r3, [pc, #580]	; (800286c <HAL_RCC_OscConfig+0x264>)
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800262c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0301 	and.w	r3, r3, #1
 8002636:	2b00      	cmp	r3, #0
 8002638:	d07b      	beq.n	8002732 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800263a:	69bb      	ldr	r3, [r7, #24]
 800263c:	2b08      	cmp	r3, #8
 800263e:	d006      	beq.n	800264e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	2b0c      	cmp	r3, #12
 8002644:	d10f      	bne.n	8002666 <HAL_RCC_OscConfig+0x5e>
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800264c:	d10b      	bne.n	8002666 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800264e:	4b87      	ldr	r3, [pc, #540]	; (800286c <HAL_RCC_OscConfig+0x264>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d06a      	beq.n	8002730 <HAL_RCC_OscConfig+0x128>
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d166      	bne.n	8002730 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e2f7      	b.n	8002c56 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d106      	bne.n	800267c <HAL_RCC_OscConfig+0x74>
 800266e:	4b7f      	ldr	r3, [pc, #508]	; (800286c <HAL_RCC_OscConfig+0x264>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a7e      	ldr	r2, [pc, #504]	; (800286c <HAL_RCC_OscConfig+0x264>)
 8002674:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002678:	6013      	str	r3, [r2, #0]
 800267a:	e02d      	b.n	80026d8 <HAL_RCC_OscConfig+0xd0>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d10c      	bne.n	800269e <HAL_RCC_OscConfig+0x96>
 8002684:	4b79      	ldr	r3, [pc, #484]	; (800286c <HAL_RCC_OscConfig+0x264>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a78      	ldr	r2, [pc, #480]	; (800286c <HAL_RCC_OscConfig+0x264>)
 800268a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800268e:	6013      	str	r3, [r2, #0]
 8002690:	4b76      	ldr	r3, [pc, #472]	; (800286c <HAL_RCC_OscConfig+0x264>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a75      	ldr	r2, [pc, #468]	; (800286c <HAL_RCC_OscConfig+0x264>)
 8002696:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	e01c      	b.n	80026d8 <HAL_RCC_OscConfig+0xd0>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	2b05      	cmp	r3, #5
 80026a4:	d10c      	bne.n	80026c0 <HAL_RCC_OscConfig+0xb8>
 80026a6:	4b71      	ldr	r3, [pc, #452]	; (800286c <HAL_RCC_OscConfig+0x264>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a70      	ldr	r2, [pc, #448]	; (800286c <HAL_RCC_OscConfig+0x264>)
 80026ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	4b6e      	ldr	r3, [pc, #440]	; (800286c <HAL_RCC_OscConfig+0x264>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	4a6d      	ldr	r2, [pc, #436]	; (800286c <HAL_RCC_OscConfig+0x264>)
 80026b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026bc:	6013      	str	r3, [r2, #0]
 80026be:	e00b      	b.n	80026d8 <HAL_RCC_OscConfig+0xd0>
 80026c0:	4b6a      	ldr	r3, [pc, #424]	; (800286c <HAL_RCC_OscConfig+0x264>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a69      	ldr	r2, [pc, #420]	; (800286c <HAL_RCC_OscConfig+0x264>)
 80026c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026ca:	6013      	str	r3, [r2, #0]
 80026cc:	4b67      	ldr	r3, [pc, #412]	; (800286c <HAL_RCC_OscConfig+0x264>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4a66      	ldr	r2, [pc, #408]	; (800286c <HAL_RCC_OscConfig+0x264>)
 80026d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d013      	beq.n	8002708 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7fe fd5e 	bl	80011a0 <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80026e8:	f7fe fd5a 	bl	80011a0 <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b64      	cmp	r3, #100	; 0x64
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e2ad      	b.n	8002c56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026fa:	4b5c      	ldr	r3, [pc, #368]	; (800286c <HAL_RCC_OscConfig+0x264>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d0f0      	beq.n	80026e8 <HAL_RCC_OscConfig+0xe0>
 8002706:	e014      	b.n	8002732 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7fe fd4a 	bl	80011a0 <HAL_GetTick>
 800270c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800270e:	e008      	b.n	8002722 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002710:	f7fe fd46 	bl	80011a0 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	693b      	ldr	r3, [r7, #16]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b64      	cmp	r3, #100	; 0x64
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e299      	b.n	8002c56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002722:	4b52      	ldr	r3, [pc, #328]	; (800286c <HAL_RCC_OscConfig+0x264>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d1f0      	bne.n	8002710 <HAL_RCC_OscConfig+0x108>
 800272e:	e000      	b.n	8002732 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d05a      	beq.n	80027f4 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	2b04      	cmp	r3, #4
 8002742:	d005      	beq.n	8002750 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002744:	69bb      	ldr	r3, [r7, #24]
 8002746:	2b0c      	cmp	r3, #12
 8002748:	d119      	bne.n	800277e <HAL_RCC_OscConfig+0x176>
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d116      	bne.n	800277e <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002750:	4b46      	ldr	r3, [pc, #280]	; (800286c <HAL_RCC_OscConfig+0x264>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <HAL_RCC_OscConfig+0x160>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d001      	beq.n	8002768 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e276      	b.n	8002c56 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002768:	4b40      	ldr	r3, [pc, #256]	; (800286c <HAL_RCC_OscConfig+0x264>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	691b      	ldr	r3, [r3, #16]
 8002774:	021b      	lsls	r3, r3, #8
 8002776:	493d      	ldr	r1, [pc, #244]	; (800286c <HAL_RCC_OscConfig+0x264>)
 8002778:	4313      	orrs	r3, r2
 800277a:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277c:	e03a      	b.n	80027f4 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d020      	beq.n	80027c8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002786:	4b3a      	ldr	r3, [pc, #232]	; (8002870 <HAL_RCC_OscConfig+0x268>)
 8002788:	2201      	movs	r2, #1
 800278a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800278c:	f7fe fd08 	bl	80011a0 <HAL_GetTick>
 8002790:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002792:	e008      	b.n	80027a6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002794:	f7fe fd04 	bl	80011a0 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	2b02      	cmp	r3, #2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e257      	b.n	8002c56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80027a6:	4b31      	ldr	r3, [pc, #196]	; (800286c <HAL_RCC_OscConfig+0x264>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0f0      	beq.n	8002794 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b2:	4b2e      	ldr	r3, [pc, #184]	; (800286c <HAL_RCC_OscConfig+0x264>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	691b      	ldr	r3, [r3, #16]
 80027be:	021b      	lsls	r3, r3, #8
 80027c0:	492a      	ldr	r1, [pc, #168]	; (800286c <HAL_RCC_OscConfig+0x264>)
 80027c2:	4313      	orrs	r3, r2
 80027c4:	604b      	str	r3, [r1, #4]
 80027c6:	e015      	b.n	80027f4 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027c8:	4b29      	ldr	r3, [pc, #164]	; (8002870 <HAL_RCC_OscConfig+0x268>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027ce:	f7fe fce7 	bl	80011a0 <HAL_GetTick>
 80027d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027d4:	e008      	b.n	80027e8 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027d6:	f7fe fce3 	bl	80011a0 <HAL_GetTick>
 80027da:	4602      	mov	r2, r0
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	1ad3      	subs	r3, r2, r3
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d901      	bls.n	80027e8 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e236      	b.n	8002c56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027e8:	4b20      	ldr	r3, [pc, #128]	; (800286c <HAL_RCC_OscConfig+0x264>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 0302 	and.w	r3, r3, #2
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d1f0      	bne.n	80027d6 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0310 	and.w	r3, r3, #16
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 80b8 	beq.w	8002972 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002802:	69bb      	ldr	r3, [r7, #24]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d170      	bne.n	80028ea <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002808:	4b18      	ldr	r3, [pc, #96]	; (800286c <HAL_RCC_OscConfig+0x264>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002810:	2b00      	cmp	r3, #0
 8002812:	d005      	beq.n	8002820 <HAL_RCC_OscConfig+0x218>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	2b00      	cmp	r3, #0
 800281a:	d101      	bne.n	8002820 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e21a      	b.n	8002c56 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1a      	ldr	r2, [r3, #32]
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <HAL_RCC_OscConfig+0x264>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800282c:	429a      	cmp	r2, r3
 800282e:	d921      	bls.n	8002874 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	4618      	mov	r0, r3
 8002836:	f000 fc23 	bl	8003080 <RCC_SetFlashLatencyFromMSIRange>
 800283a:	4603      	mov	r3, r0
 800283c:	2b00      	cmp	r3, #0
 800283e:	d001      	beq.n	8002844 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e208      	b.n	8002c56 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002844:	4b09      	ldr	r3, [pc, #36]	; (800286c <HAL_RCC_OscConfig+0x264>)
 8002846:	685b      	ldr	r3, [r3, #4]
 8002848:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a1b      	ldr	r3, [r3, #32]
 8002850:	4906      	ldr	r1, [pc, #24]	; (800286c <HAL_RCC_OscConfig+0x264>)
 8002852:	4313      	orrs	r3, r2
 8002854:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002856:	4b05      	ldr	r3, [pc, #20]	; (800286c <HAL_RCC_OscConfig+0x264>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	061b      	lsls	r3, r3, #24
 8002864:	4901      	ldr	r1, [pc, #4]	; (800286c <HAL_RCC_OscConfig+0x264>)
 8002866:	4313      	orrs	r3, r2
 8002868:	604b      	str	r3, [r1, #4]
 800286a:	e020      	b.n	80028ae <HAL_RCC_OscConfig+0x2a6>
 800286c:	40023800 	.word	0x40023800
 8002870:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002874:	4ba4      	ldr	r3, [pc, #656]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6a1b      	ldr	r3, [r3, #32]
 8002880:	49a1      	ldr	r1, [pc, #644]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 8002882:	4313      	orrs	r3, r2
 8002884:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002886:	4ba0      	ldr	r3, [pc, #640]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	061b      	lsls	r3, r3, #24
 8002894:	499c      	ldr	r1, [pc, #624]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 8002896:	4313      	orrs	r3, r2
 8002898:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 fbee 	bl	8003080 <RCC_SetFlashLatencyFromMSIRange>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d001      	beq.n	80028ae <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e1d3      	b.n	8002c56 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	0b5b      	lsrs	r3, r3, #13
 80028b4:	3301      	adds	r3, #1
 80028b6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80028ba:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80028be:	4a92      	ldr	r2, [pc, #584]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 80028c0:	6892      	ldr	r2, [r2, #8]
 80028c2:	0912      	lsrs	r2, r2, #4
 80028c4:	f002 020f 	and.w	r2, r2, #15
 80028c8:	4990      	ldr	r1, [pc, #576]	; (8002b0c <HAL_RCC_OscConfig+0x504>)
 80028ca:	5c8a      	ldrb	r2, [r1, r2]
 80028cc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80028ce:	4a90      	ldr	r2, [pc, #576]	; (8002b10 <HAL_RCC_OscConfig+0x508>)
 80028d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028d2:	4b90      	ldr	r3, [pc, #576]	; (8002b14 <HAL_RCC_OscConfig+0x50c>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f7fe fc16 	bl	8001108 <HAL_InitTick>
 80028dc:	4603      	mov	r3, r0
 80028de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d045      	beq.n	8002972 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	e1b5      	b.n	8002c56 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d029      	beq.n	8002946 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028f2:	4b89      	ldr	r3, [pc, #548]	; (8002b18 <HAL_RCC_OscConfig+0x510>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028f8:	f7fe fc52 	bl	80011a0 <HAL_GetTick>
 80028fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80028fe:	e008      	b.n	8002912 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002900:	f7fe fc4e 	bl	80011a0 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e1a1      	b.n	8002c56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002912:	4b7d      	ldr	r3, [pc, #500]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800291e:	4b7a      	ldr	r3, [pc, #488]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	4977      	ldr	r1, [pc, #476]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002930:	4b75      	ldr	r3, [pc, #468]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	69db      	ldr	r3, [r3, #28]
 800293c:	061b      	lsls	r3, r3, #24
 800293e:	4972      	ldr	r1, [pc, #456]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 8002940:	4313      	orrs	r3, r2
 8002942:	604b      	str	r3, [r1, #4]
 8002944:	e015      	b.n	8002972 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002946:	4b74      	ldr	r3, [pc, #464]	; (8002b18 <HAL_RCC_OscConfig+0x510>)
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800294c:	f7fe fc28 	bl	80011a0 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002952:	e008      	b.n	8002966 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002954:	f7fe fc24 	bl	80011a0 <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e177      	b.n	8002c56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002966:	4b68      	ldr	r3, [pc, #416]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800296e:	2b00      	cmp	r3, #0
 8002970:	d1f0      	bne.n	8002954 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0308 	and.w	r3, r3, #8
 800297a:	2b00      	cmp	r3, #0
 800297c:	d030      	beq.n	80029e0 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	695b      	ldr	r3, [r3, #20]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d016      	beq.n	80029b4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002986:	4b65      	ldr	r3, [pc, #404]	; (8002b1c <HAL_RCC_OscConfig+0x514>)
 8002988:	2201      	movs	r2, #1
 800298a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800298c:	f7fe fc08 	bl	80011a0 <HAL_GetTick>
 8002990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002994:	f7fe fc04 	bl	80011a0 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e157      	b.n	8002c56 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029a6:	4b58      	ldr	r3, [pc, #352]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 80029a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0x38c>
 80029b2:	e015      	b.n	80029e0 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b4:	4b59      	ldr	r3, [pc, #356]	; (8002b1c <HAL_RCC_OscConfig+0x514>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029ba:	f7fe fbf1 	bl	80011a0 <HAL_GetTick>
 80029be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029c0:	e008      	b.n	80029d4 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029c2:	f7fe fbed 	bl	80011a0 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d901      	bls.n	80029d4 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	e140      	b.n	8002c56 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029d4:	4b4c      	ldr	r3, [pc, #304]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 80029d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029d8:	f003 0302 	and.w	r3, r3, #2
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1f0      	bne.n	80029c2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	f000 80b5 	beq.w	8002b58 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029ee:	2300      	movs	r3, #0
 80029f0:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029f2:	4b45      	ldr	r3, [pc, #276]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 80029f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d10d      	bne.n	8002a1a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029fe:	4b42      	ldr	r3, [pc, #264]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 8002a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a02:	4a41      	ldr	r2, [pc, #260]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 8002a04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a08:	6253      	str	r3, [r2, #36]	; 0x24
 8002a0a:	4b3f      	ldr	r3, [pc, #252]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 8002a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a16:	2301      	movs	r3, #1
 8002a18:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a1a:	4b41      	ldr	r3, [pc, #260]	; (8002b20 <HAL_RCC_OscConfig+0x518>)
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d118      	bne.n	8002a58 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a26:	4b3e      	ldr	r3, [pc, #248]	; (8002b20 <HAL_RCC_OscConfig+0x518>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	4a3d      	ldr	r2, [pc, #244]	; (8002b20 <HAL_RCC_OscConfig+0x518>)
 8002a2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a30:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a32:	f7fe fbb5 	bl	80011a0 <HAL_GetTick>
 8002a36:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a38:	e008      	b.n	8002a4c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a3a:	f7fe fbb1 	bl	80011a0 <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	1ad3      	subs	r3, r2, r3
 8002a44:	2b64      	cmp	r3, #100	; 0x64
 8002a46:	d901      	bls.n	8002a4c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8002a48:	2303      	movs	r3, #3
 8002a4a:	e104      	b.n	8002c56 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a4c:	4b34      	ldr	r3, [pc, #208]	; (8002b20 <HAL_RCC_OscConfig+0x518>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	d0f0      	beq.n	8002a3a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2b01      	cmp	r3, #1
 8002a5e:	d106      	bne.n	8002a6e <HAL_RCC_OscConfig+0x466>
 8002a60:	4b29      	ldr	r3, [pc, #164]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 8002a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a64:	4a28      	ldr	r2, [pc, #160]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 8002a66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a6a:	6353      	str	r3, [r2, #52]	; 0x34
 8002a6c:	e02d      	b.n	8002aca <HAL_RCC_OscConfig+0x4c2>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10c      	bne.n	8002a90 <HAL_RCC_OscConfig+0x488>
 8002a76:	4b24      	ldr	r3, [pc, #144]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 8002a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a7a:	4a23      	ldr	r2, [pc, #140]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 8002a7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a80:	6353      	str	r3, [r2, #52]	; 0x34
 8002a82:	4b21      	ldr	r3, [pc, #132]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 8002a84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a86:	4a20      	ldr	r2, [pc, #128]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 8002a88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a8c:	6353      	str	r3, [r2, #52]	; 0x34
 8002a8e:	e01c      	b.n	8002aca <HAL_RCC_OscConfig+0x4c2>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	689b      	ldr	r3, [r3, #8]
 8002a94:	2b05      	cmp	r3, #5
 8002a96:	d10c      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x4aa>
 8002a98:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 8002a9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a9c:	4a1a      	ldr	r2, [pc, #104]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 8002a9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002aa2:	6353      	str	r3, [r2, #52]	; 0x34
 8002aa4:	4b18      	ldr	r3, [pc, #96]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 8002aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aa8:	4a17      	ldr	r2, [pc, #92]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 8002aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002aae:	6353      	str	r3, [r2, #52]	; 0x34
 8002ab0:	e00b      	b.n	8002aca <HAL_RCC_OscConfig+0x4c2>
 8002ab2:	4b15      	ldr	r3, [pc, #84]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 8002ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ab6:	4a14      	ldr	r2, [pc, #80]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 8002ab8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002abc:	6353      	str	r3, [r2, #52]	; 0x34
 8002abe:	4b12      	ldr	r3, [pc, #72]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 8002ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ac2:	4a11      	ldr	r2, [pc, #68]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 8002ac4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ac8:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d015      	beq.n	8002afe <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ad2:	f7fe fb65 	bl	80011a0 <HAL_GetTick>
 8002ad6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ad8:	e00a      	b.n	8002af0 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ada:	f7fe fb61 	bl	80011a0 <HAL_GetTick>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	1ad3      	subs	r3, r2, r3
 8002ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e0b2      	b.n	8002c56 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002af0:	4b05      	ldr	r3, [pc, #20]	; (8002b08 <HAL_RCC_OscConfig+0x500>)
 8002af2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002af4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0ee      	beq.n	8002ada <HAL_RCC_OscConfig+0x4d2>
 8002afc:	e023      	b.n	8002b46 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002afe:	f7fe fb4f 	bl	80011a0 <HAL_GetTick>
 8002b02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b04:	e019      	b.n	8002b3a <HAL_RCC_OscConfig+0x532>
 8002b06:	bf00      	nop
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	08003674 	.word	0x08003674
 8002b10:	20000004 	.word	0x20000004
 8002b14:	20000008 	.word	0x20000008
 8002b18:	42470020 	.word	0x42470020
 8002b1c:	42470680 	.word	0x42470680
 8002b20:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b24:	f7fe fb3c 	bl	80011a0 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b32:	4293      	cmp	r3, r2
 8002b34:	d901      	bls.n	8002b3a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8002b36:	2303      	movs	r3, #3
 8002b38:	e08d      	b.n	8002c56 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b3a:	4b49      	ldr	r3, [pc, #292]	; (8002c60 <HAL_RCC_OscConfig+0x658>)
 8002b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d1ee      	bne.n	8002b24 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b46:	7ffb      	ldrb	r3, [r7, #31]
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d105      	bne.n	8002b58 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b4c:	4b44      	ldr	r3, [pc, #272]	; (8002c60 <HAL_RCC_OscConfig+0x658>)
 8002b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b50:	4a43      	ldr	r2, [pc, #268]	; (8002c60 <HAL_RCC_OscConfig+0x658>)
 8002b52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b56:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d079      	beq.n	8002c54 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	2b0c      	cmp	r3, #12
 8002b64:	d056      	beq.n	8002c14 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d13b      	bne.n	8002be6 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6e:	4b3d      	ldr	r3, [pc, #244]	; (8002c64 <HAL_RCC_OscConfig+0x65c>)
 8002b70:	2200      	movs	r2, #0
 8002b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b74:	f7fe fb14 	bl	80011a0 <HAL_GetTick>
 8002b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b7a:	e008      	b.n	8002b8e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b7c:	f7fe fb10 	bl	80011a0 <HAL_GetTick>
 8002b80:	4602      	mov	r2, r0
 8002b82:	693b      	ldr	r3, [r7, #16]
 8002b84:	1ad3      	subs	r3, r2, r3
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d901      	bls.n	8002b8e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e063      	b.n	8002c56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b8e:	4b34      	ldr	r3, [pc, #208]	; (8002c60 <HAL_RCC_OscConfig+0x658>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d1f0      	bne.n	8002b7c <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b9a:	4b31      	ldr	r3, [pc, #196]	; (8002c60 <HAL_RCC_OscConfig+0x658>)
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	4319      	orrs	r1, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb0:	430b      	orrs	r3, r1
 8002bb2:	492b      	ldr	r1, [pc, #172]	; (8002c60 <HAL_RCC_OscConfig+0x658>)
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002bb8:	4b2a      	ldr	r3, [pc, #168]	; (8002c64 <HAL_RCC_OscConfig+0x65c>)
 8002bba:	2201      	movs	r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbe:	f7fe faef 	bl	80011a0 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bc6:	f7fe faeb 	bl	80011a0 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e03e      	b.n	8002c56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002bd8:	4b21      	ldr	r3, [pc, #132]	; (8002c60 <HAL_RCC_OscConfig+0x658>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0f0      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x5be>
 8002be4:	e036      	b.n	8002c54 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be6:	4b1f      	ldr	r3, [pc, #124]	; (8002c64 <HAL_RCC_OscConfig+0x65c>)
 8002be8:	2200      	movs	r2, #0
 8002bea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bec:	f7fe fad8 	bl	80011a0 <HAL_GetTick>
 8002bf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bf2:	e008      	b.n	8002c06 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bf4:	f7fe fad4 	bl	80011a0 <HAL_GetTick>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	693b      	ldr	r3, [r7, #16]
 8002bfc:	1ad3      	subs	r3, r2, r3
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d901      	bls.n	8002c06 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8002c02:	2303      	movs	r3, #3
 8002c04:	e027      	b.n	8002c56 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002c06:	4b16      	ldr	r3, [pc, #88]	; (8002c60 <HAL_RCC_OscConfig+0x658>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d1f0      	bne.n	8002bf4 <HAL_RCC_OscConfig+0x5ec>
 8002c12:	e01f      	b.n	8002c54 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d101      	bne.n	8002c20 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e01a      	b.n	8002c56 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c20:	4b0f      	ldr	r3, [pc, #60]	; (8002c60 <HAL_RCC_OscConfig+0x658>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c30:	429a      	cmp	r2, r3
 8002c32:	d10d      	bne.n	8002c50 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002c34:	697b      	ldr	r3, [r7, #20]
 8002c36:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d106      	bne.n	8002c50 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d001      	beq.n	8002c54 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e000      	b.n	8002c56 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8002c54:	2300      	movs	r3, #0
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3720      	adds	r7, #32
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	40023800 	.word	0x40023800
 8002c64:	42470060 	.word	0x42470060

08002c68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b084      	sub	sp, #16
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
 8002c70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d101      	bne.n	8002c7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e11a      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c7c:	4b8f      	ldr	r3, [pc, #572]	; (8002ebc <HAL_RCC_ClockConfig+0x254>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d919      	bls.n	8002cbe <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	2b01      	cmp	r3, #1
 8002c8e:	d105      	bne.n	8002c9c <HAL_RCC_ClockConfig+0x34>
 8002c90:	4b8a      	ldr	r3, [pc, #552]	; (8002ebc <HAL_RCC_ClockConfig+0x254>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a89      	ldr	r2, [pc, #548]	; (8002ebc <HAL_RCC_ClockConfig+0x254>)
 8002c96:	f043 0304 	orr.w	r3, r3, #4
 8002c9a:	6013      	str	r3, [r2, #0]
 8002c9c:	4b87      	ldr	r3, [pc, #540]	; (8002ebc <HAL_RCC_ClockConfig+0x254>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f023 0201 	bic.w	r2, r3, #1
 8002ca4:	4985      	ldr	r1, [pc, #532]	; (8002ebc <HAL_RCC_ClockConfig+0x254>)
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cac:	4b83      	ldr	r3, [pc, #524]	; (8002ebc <HAL_RCC_ClockConfig+0x254>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d001      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e0f9      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f003 0302 	and.w	r3, r3, #2
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d008      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cca:	4b7d      	ldr	r3, [pc, #500]	; (8002ec0 <HAL_RCC_ClockConfig+0x258>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	497a      	ldr	r1, [pc, #488]	; (8002ec0 <HAL_RCC_ClockConfig+0x258>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 808e 	beq.w	8002e06 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	2b02      	cmp	r3, #2
 8002cf0:	d107      	bne.n	8002d02 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cf2:	4b73      	ldr	r3, [pc, #460]	; (8002ec0 <HAL_RCC_ClockConfig+0x258>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d121      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e0d7      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b03      	cmp	r3, #3
 8002d08:	d107      	bne.n	8002d1a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d0a:	4b6d      	ldr	r3, [pc, #436]	; (8002ec0 <HAL_RCC_ClockConfig+0x258>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d115      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e0cb      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d107      	bne.n	8002d32 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d22:	4b67      	ldr	r3, [pc, #412]	; (8002ec0 <HAL_RCC_ClockConfig+0x258>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d109      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e0bf      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d32:	4b63      	ldr	r3, [pc, #396]	; (8002ec0 <HAL_RCC_ClockConfig+0x258>)
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d101      	bne.n	8002d42 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e0b7      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d42:	4b5f      	ldr	r3, [pc, #380]	; (8002ec0 <HAL_RCC_ClockConfig+0x258>)
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f023 0203 	bic.w	r2, r3, #3
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	495c      	ldr	r1, [pc, #368]	; (8002ec0 <HAL_RCC_ClockConfig+0x258>)
 8002d50:	4313      	orrs	r3, r2
 8002d52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d54:	f7fe fa24 	bl	80011a0 <HAL_GetTick>
 8002d58:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	2b02      	cmp	r3, #2
 8002d60:	d112      	bne.n	8002d88 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d62:	e00a      	b.n	8002d7a <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d64:	f7fe fa1c 	bl	80011a0 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d901      	bls.n	8002d7a <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8002d76:	2303      	movs	r3, #3
 8002d78:	e09b      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d7a:	4b51      	ldr	r3, [pc, #324]	; (8002ec0 <HAL_RCC_ClockConfig+0x258>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
 8002d82:	2b08      	cmp	r3, #8
 8002d84:	d1ee      	bne.n	8002d64 <HAL_RCC_ClockConfig+0xfc>
 8002d86:	e03e      	b.n	8002e06 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	2b03      	cmp	r3, #3
 8002d8e:	d112      	bne.n	8002db6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d90:	e00a      	b.n	8002da8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d92:	f7fe fa05 	bl	80011a0 <HAL_GetTick>
 8002d96:	4602      	mov	r2, r0
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d901      	bls.n	8002da8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8002da4:	2303      	movs	r3, #3
 8002da6:	e084      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002da8:	4b45      	ldr	r3, [pc, #276]	; (8002ec0 <HAL_RCC_ClockConfig+0x258>)
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f003 030c 	and.w	r3, r3, #12
 8002db0:	2b0c      	cmp	r3, #12
 8002db2:	d1ee      	bne.n	8002d92 <HAL_RCC_ClockConfig+0x12a>
 8002db4:	e027      	b.n	8002e06 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d11d      	bne.n	8002dfa <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dbe:	e00a      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc0:	f7fe f9ee 	bl	80011a0 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e06d      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dd6:	4b3a      	ldr	r3, [pc, #232]	; (8002ec0 <HAL_RCC_ClockConfig+0x258>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 030c 	and.w	r3, r3, #12
 8002dde:	2b04      	cmp	r3, #4
 8002de0:	d1ee      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0x158>
 8002de2:	e010      	b.n	8002e06 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002de4:	f7fe f9dc 	bl	80011a0 <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d901      	bls.n	8002dfa <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8002df6:	2303      	movs	r3, #3
 8002df8:	e05b      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002dfa:	4b31      	ldr	r3, [pc, #196]	; (8002ec0 <HAL_RCC_ClockConfig+0x258>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1ee      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e06:	4b2d      	ldr	r3, [pc, #180]	; (8002ebc <HAL_RCC_ClockConfig+0x254>)
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f003 0301 	and.w	r3, r3, #1
 8002e0e:	683a      	ldr	r2, [r7, #0]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d219      	bcs.n	8002e48 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d105      	bne.n	8002e26 <HAL_RCC_ClockConfig+0x1be>
 8002e1a:	4b28      	ldr	r3, [pc, #160]	; (8002ebc <HAL_RCC_ClockConfig+0x254>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a27      	ldr	r2, [pc, #156]	; (8002ebc <HAL_RCC_ClockConfig+0x254>)
 8002e20:	f043 0304 	orr.w	r3, r3, #4
 8002e24:	6013      	str	r3, [r2, #0]
 8002e26:	4b25      	ldr	r3, [pc, #148]	; (8002ebc <HAL_RCC_ClockConfig+0x254>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 0201 	bic.w	r2, r3, #1
 8002e2e:	4923      	ldr	r1, [pc, #140]	; (8002ebc <HAL_RCC_ClockConfig+0x254>)
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	4313      	orrs	r3, r2
 8002e34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e36:	4b21      	ldr	r3, [pc, #132]	; (8002ebc <HAL_RCC_ClockConfig+0x254>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	683a      	ldr	r2, [r7, #0]
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d001      	beq.n	8002e48 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e034      	b.n	8002eb2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0304 	and.w	r3, r3, #4
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d008      	beq.n	8002e66 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e54:	4b1a      	ldr	r3, [pc, #104]	; (8002ec0 <HAL_RCC_ClockConfig+0x258>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	4917      	ldr	r1, [pc, #92]	; (8002ec0 <HAL_RCC_ClockConfig+0x258>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d009      	beq.n	8002e86 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e72:	4b13      	ldr	r3, [pc, #76]	; (8002ec0 <HAL_RCC_ClockConfig+0x258>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	691b      	ldr	r3, [r3, #16]
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	490f      	ldr	r1, [pc, #60]	; (8002ec0 <HAL_RCC_ClockConfig+0x258>)
 8002e82:	4313      	orrs	r3, r2
 8002e84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e86:	f000 f823 	bl	8002ed0 <HAL_RCC_GetSysClockFreq>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	4b0c      	ldr	r3, [pc, #48]	; (8002ec0 <HAL_RCC_ClockConfig+0x258>)
 8002e8e:	689b      	ldr	r3, [r3, #8]
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	f003 030f 	and.w	r3, r3, #15
 8002e96:	490b      	ldr	r1, [pc, #44]	; (8002ec4 <HAL_RCC_ClockConfig+0x25c>)
 8002e98:	5ccb      	ldrb	r3, [r1, r3]
 8002e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e9e:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <HAL_RCC_ClockConfig+0x260>)
 8002ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002ea2:	4b0a      	ldr	r3, [pc, #40]	; (8002ecc <HAL_RCC_ClockConfig+0x264>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fe f92e 	bl	8001108 <HAL_InitTick>
 8002eac:	4603      	mov	r3, r0
 8002eae:	72fb      	strb	r3, [r7, #11]

  return status;
 8002eb0:	7afb      	ldrb	r3, [r7, #11]
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3710      	adds	r7, #16
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}
 8002eba:	bf00      	nop
 8002ebc:	40023c00 	.word	0x40023c00
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	08003674 	.word	0x08003674
 8002ec8:	20000004 	.word	0x20000004
 8002ecc:	20000008 	.word	0x20000008

08002ed0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ed0:	b5b0      	push	{r4, r5, r7, lr}
 8002ed2:	b086      	sub	sp, #24
 8002ed4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8002ed6:	4b4d      	ldr	r3, [pc, #308]	; (800300c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002ed8:	689b      	ldr	r3, [r3, #8]
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	f003 030c 	and.w	r3, r3, #12
 8002ee2:	2b0c      	cmp	r3, #12
 8002ee4:	d00c      	beq.n	8002f00 <HAL_RCC_GetSysClockFreq+0x30>
 8002ee6:	2b0c      	cmp	r3, #12
 8002ee8:	d87c      	bhi.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x114>
 8002eea:	2b04      	cmp	r3, #4
 8002eec:	d002      	beq.n	8002ef4 <HAL_RCC_GetSysClockFreq+0x24>
 8002eee:	2b08      	cmp	r3, #8
 8002ef0:	d003      	beq.n	8002efa <HAL_RCC_GetSysClockFreq+0x2a>
 8002ef2:	e077      	b.n	8002fe4 <HAL_RCC_GetSysClockFreq+0x114>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ef4:	4b46      	ldr	r3, [pc, #280]	; (8003010 <HAL_RCC_GetSysClockFreq+0x140>)
 8002ef6:	613b      	str	r3, [r7, #16]
      break;
 8002ef8:	e082      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002efa:	4b46      	ldr	r3, [pc, #280]	; (8003014 <HAL_RCC_GetSysClockFreq+0x144>)
 8002efc:	613b      	str	r3, [r7, #16]
      break;
 8002efe:	e07f      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	0c9b      	lsrs	r3, r3, #18
 8002f04:	f003 030f 	and.w	r3, r3, #15
 8002f08:	4a43      	ldr	r2, [pc, #268]	; (8003018 <HAL_RCC_GetSysClockFreq+0x148>)
 8002f0a:	5cd3      	ldrb	r3, [r2, r3]
 8002f0c:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	0d9b      	lsrs	r3, r3, #22
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	3301      	adds	r3, #1
 8002f18:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002f1a:	4b3c      	ldr	r3, [pc, #240]	; (800300c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d01a      	beq.n	8002f5c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f26:	68bb      	ldr	r3, [r7, #8]
 8002f28:	461a      	mov	r2, r3
 8002f2a:	f04f 0300 	mov.w	r3, #0
 8002f2e:	4939      	ldr	r1, [pc, #228]	; (8003014 <HAL_RCC_GetSysClockFreq+0x144>)
 8002f30:	fb01 f003 	mul.w	r0, r1, r3
 8002f34:	2100      	movs	r1, #0
 8002f36:	fb01 f102 	mul.w	r1, r1, r2
 8002f3a:	1844      	adds	r4, r0, r1
 8002f3c:	4935      	ldr	r1, [pc, #212]	; (8003014 <HAL_RCC_GetSysClockFreq+0x144>)
 8002f3e:	fba2 0101 	umull	r0, r1, r2, r1
 8002f42:	1863      	adds	r3, r4, r1
 8002f44:	4619      	mov	r1, r3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	f04f 0300 	mov.w	r3, #0
 8002f4e:	f7fd f915 	bl	800017c <__aeabi_uldivmod>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	4613      	mov	r3, r2
 8002f58:	617b      	str	r3, [r7, #20]
 8002f5a:	e040      	b.n	8002fde <HAL_RCC_GetSysClockFreq+0x10e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	461c      	mov	r4, r3
 8002f60:	f04f 0500 	mov.w	r5, #0
 8002f64:	4620      	mov	r0, r4
 8002f66:	4629      	mov	r1, r5
 8002f68:	f04f 0200 	mov.w	r2, #0
 8002f6c:	f04f 0300 	mov.w	r3, #0
 8002f70:	014b      	lsls	r3, r1, #5
 8002f72:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002f76:	0142      	lsls	r2, r0, #5
 8002f78:	4610      	mov	r0, r2
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	1b00      	subs	r0, r0, r4
 8002f7e:	eb61 0105 	sbc.w	r1, r1, r5
 8002f82:	f04f 0200 	mov.w	r2, #0
 8002f86:	f04f 0300 	mov.w	r3, #0
 8002f8a:	018b      	lsls	r3, r1, #6
 8002f8c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002f90:	0182      	lsls	r2, r0, #6
 8002f92:	1a12      	subs	r2, r2, r0
 8002f94:	eb63 0301 	sbc.w	r3, r3, r1
 8002f98:	f04f 0000 	mov.w	r0, #0
 8002f9c:	f04f 0100 	mov.w	r1, #0
 8002fa0:	00d9      	lsls	r1, r3, #3
 8002fa2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002fa6:	00d0      	lsls	r0, r2, #3
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	1912      	adds	r2, r2, r4
 8002fae:	eb45 0303 	adc.w	r3, r5, r3
 8002fb2:	f04f 0000 	mov.w	r0, #0
 8002fb6:	f04f 0100 	mov.w	r1, #0
 8002fba:	0299      	lsls	r1, r3, #10
 8002fbc:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002fc0:	0290      	lsls	r0, r2, #10
 8002fc2:	4602      	mov	r2, r0
 8002fc4:	460b      	mov	r3, r1
 8002fc6:	4610      	mov	r0, r2
 8002fc8:	4619      	mov	r1, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	f7fd f8d3 	bl	800017c <__aeabi_uldivmod>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4613      	mov	r3, r2
 8002fdc:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	613b      	str	r3, [r7, #16]
      break;
 8002fe2:	e00d      	b.n	8003000 <HAL_RCC_GetSysClockFreq+0x130>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002fe4:	4b09      	ldr	r3, [pc, #36]	; (800300c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	0b5b      	lsrs	r3, r3, #13
 8002fea:	f003 0307 	and.w	r3, r3, #7
 8002fee:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	613b      	str	r3, [r7, #16]
      break;
 8002ffe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003000:	693b      	ldr	r3, [r7, #16]
}
 8003002:	4618      	mov	r0, r3
 8003004:	3718      	adds	r7, #24
 8003006:	46bd      	mov	sp, r7
 8003008:	bdb0      	pop	{r4, r5, r7, pc}
 800300a:	bf00      	nop
 800300c:	40023800 	.word	0x40023800
 8003010:	00f42400 	.word	0x00f42400
 8003014:	016e3600 	.word	0x016e3600
 8003018:	08003668 	.word	0x08003668

0800301c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800301c:	b480      	push	{r7}
 800301e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003020:	4b02      	ldr	r3, [pc, #8]	; (800302c <HAL_RCC_GetHCLKFreq+0x10>)
 8003022:	681b      	ldr	r3, [r3, #0]
}
 8003024:	4618      	mov	r0, r3
 8003026:	46bd      	mov	sp, r7
 8003028:	bc80      	pop	{r7}
 800302a:	4770      	bx	lr
 800302c:	20000004 	.word	0x20000004

08003030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003034:	f7ff fff2 	bl	800301c <HAL_RCC_GetHCLKFreq>
 8003038:	4602      	mov	r2, r0
 800303a:	4b05      	ldr	r3, [pc, #20]	; (8003050 <HAL_RCC_GetPCLK1Freq+0x20>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	0a1b      	lsrs	r3, r3, #8
 8003040:	f003 0307 	and.w	r3, r3, #7
 8003044:	4903      	ldr	r1, [pc, #12]	; (8003054 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003046:	5ccb      	ldrb	r3, [r1, r3]
 8003048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800304c:	4618      	mov	r0, r3
 800304e:	bd80      	pop	{r7, pc}
 8003050:	40023800 	.word	0x40023800
 8003054:	08003684 	.word	0x08003684

08003058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800305c:	f7ff ffde 	bl	800301c <HAL_RCC_GetHCLKFreq>
 8003060:	4602      	mov	r2, r0
 8003062:	4b05      	ldr	r3, [pc, #20]	; (8003078 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	0adb      	lsrs	r3, r3, #11
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	4903      	ldr	r1, [pc, #12]	; (800307c <HAL_RCC_GetPCLK2Freq+0x24>)
 800306e:	5ccb      	ldrb	r3, [r1, r3]
 8003070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003074:	4618      	mov	r0, r3
 8003076:	bd80      	pop	{r7, pc}
 8003078:	40023800 	.word	0x40023800
 800307c:	08003684 	.word	0x08003684

08003080 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003080:	b480      	push	{r7}
 8003082:	b087      	sub	sp, #28
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003088:	2300      	movs	r3, #0
 800308a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800308c:	4b29      	ldr	r3, [pc, #164]	; (8003134 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800308e:	689b      	ldr	r3, [r3, #8]
 8003090:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d12c      	bne.n	80030f2 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003098:	4b26      	ldr	r3, [pc, #152]	; (8003134 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800309a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800309c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d005      	beq.n	80030b0 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80030a4:	4b24      	ldr	r3, [pc, #144]	; (8003138 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80030ac:	617b      	str	r3, [r7, #20]
 80030ae:	e016      	b.n	80030de <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80030b0:	4b20      	ldr	r3, [pc, #128]	; (8003134 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b4:	4a1f      	ldr	r2, [pc, #124]	; (8003134 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030ba:	6253      	str	r3, [r2, #36]	; 0x24
 80030bc:	4b1d      	ldr	r3, [pc, #116]	; (8003134 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030c4:	60fb      	str	r3, [r7, #12]
 80030c6:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80030c8:	4b1b      	ldr	r3, [pc, #108]	; (8003138 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80030d0:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 80030d2:	4b18      	ldr	r3, [pc, #96]	; (8003134 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030d6:	4a17      	ldr	r2, [pc, #92]	; (8003134 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80030d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030dc:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80030e4:	d105      	bne.n	80030f2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80030ec:	d101      	bne.n	80030f2 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 80030ee:	2301      	movs	r3, #1
 80030f0:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d105      	bne.n	8003104 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80030f8:	4b10      	ldr	r3, [pc, #64]	; (800313c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a0f      	ldr	r2, [pc, #60]	; (800313c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80030fe:	f043 0304 	orr.w	r3, r3, #4
 8003102:	6013      	str	r3, [r2, #0]
 8003104:	4b0d      	ldr	r3, [pc, #52]	; (800313c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f023 0201 	bic.w	r2, r3, #1
 800310c:	490b      	ldr	r1, [pc, #44]	; (800313c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4313      	orrs	r3, r2
 8003112:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003114:	4b09      	ldr	r3, [pc, #36]	; (800313c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0301 	and.w	r3, r3, #1
 800311c:	693a      	ldr	r2, [r7, #16]
 800311e:	429a      	cmp	r2, r3
 8003120:	d001      	beq.n	8003126 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	371c      	adds	r7, #28
 800312c:	46bd      	mov	sp, r7
 800312e:	bc80      	pop	{r7}
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40023800 	.word	0x40023800
 8003138:	40007000 	.word	0x40007000
 800313c:	40023c00 	.word	0x40023c00

08003140 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b082      	sub	sp, #8
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d101      	bne.n	8003152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e03f      	b.n	80031d2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003158:	b2db      	uxtb	r3, r3
 800315a:	2b00      	cmp	r3, #0
 800315c:	d106      	bne.n	800316c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2200      	movs	r2, #0
 8003162:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f7fd ff18 	bl	8000f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2224      	movs	r2, #36	; 0x24
 8003170:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68da      	ldr	r2, [r3, #12]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003182:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f000 f90b 	bl	80033a0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	691a      	ldr	r2, [r3, #16]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003198:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	695a      	ldr	r2, [r3, #20]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	68da      	ldr	r2, [r3, #12]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2200      	movs	r2, #0
 80031be:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2220      	movs	r2, #32
 80031c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2220      	movs	r2, #32
 80031cc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}

080031da <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031da:	b580      	push	{r7, lr}
 80031dc:	b088      	sub	sp, #32
 80031de:	af02      	add	r7, sp, #8
 80031e0:	60f8      	str	r0, [r7, #12]
 80031e2:	60b9      	str	r1, [r7, #8]
 80031e4:	603b      	str	r3, [r7, #0]
 80031e6:	4613      	mov	r3, r2
 80031e8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80031ea:	2300      	movs	r3, #0
 80031ec:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b20      	cmp	r3, #32
 80031f8:	f040 8083 	bne.w	8003302 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d002      	beq.n	8003208 <HAL_UART_Transmit+0x2e>
 8003202:	88fb      	ldrh	r3, [r7, #6]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d101      	bne.n	800320c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e07b      	b.n	8003304 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003212:	2b01      	cmp	r3, #1
 8003214:	d101      	bne.n	800321a <HAL_UART_Transmit+0x40>
 8003216:	2302      	movs	r3, #2
 8003218:	e074      	b.n	8003304 <HAL_UART_Transmit+0x12a>
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	2221      	movs	r2, #33	; 0x21
 800322c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003230:	f7fd ffb6 	bl	80011a0 <HAL_GetTick>
 8003234:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	88fa      	ldrh	r2, [r7, #6]
 800323a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	88fa      	ldrh	r2, [r7, #6]
 8003240:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800324a:	e042      	b.n	80032d2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003250:	b29b      	uxth	r3, r3
 8003252:	3b01      	subs	r3, #1
 8003254:	b29a      	uxth	r2, r3
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003262:	d122      	bne.n	80032aa <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003264:	683b      	ldr	r3, [r7, #0]
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	697b      	ldr	r3, [r7, #20]
 800326a:	2200      	movs	r2, #0
 800326c:	2180      	movs	r1, #128	; 0x80
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f000 f84c 	bl	800330c <UART_WaitOnFlagUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d001      	beq.n	800327e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800327a:	2303      	movs	r3, #3
 800327c:	e042      	b.n	8003304 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800327e:	68bb      	ldr	r3, [r7, #8]
 8003280:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	881b      	ldrh	r3, [r3, #0]
 8003286:	461a      	mov	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003290:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d103      	bne.n	80032a2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	3302      	adds	r3, #2
 800329e:	60bb      	str	r3, [r7, #8]
 80032a0:	e017      	b.n	80032d2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	3301      	adds	r3, #1
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	e013      	b.n	80032d2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	9300      	str	r3, [sp, #0]
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	2200      	movs	r2, #0
 80032b2:	2180      	movs	r1, #128	; 0x80
 80032b4:	68f8      	ldr	r0, [r7, #12]
 80032b6:	f000 f829 	bl	800330c <UART_WaitOnFlagUntilTimeout>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e01f      	b.n	8003304 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	1c5a      	adds	r2, r3, #1
 80032c8:	60ba      	str	r2, [r7, #8]
 80032ca:	781a      	ldrb	r2, [r3, #0]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032d6:	b29b      	uxth	r3, r3
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d1b7      	bne.n	800324c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	9300      	str	r3, [sp, #0]
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	2200      	movs	r2, #0
 80032e4:	2140      	movs	r1, #64	; 0x40
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f000 f810 	bl	800330c <UART_WaitOnFlagUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d001      	beq.n	80032f6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e006      	b.n	8003304 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80032fe:	2300      	movs	r3, #0
 8003300:	e000      	b.n	8003304 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003302:	2302      	movs	r3, #2
  }
}
 8003304:	4618      	mov	r0, r3
 8003306:	3718      	adds	r7, #24
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b084      	sub	sp, #16
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	603b      	str	r3, [r7, #0]
 8003318:	4613      	mov	r3, r2
 800331a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800331c:	e02c      	b.n	8003378 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003324:	d028      	beq.n	8003378 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d007      	beq.n	800333c <UART_WaitOnFlagUntilTimeout+0x30>
 800332c:	f7fd ff38 	bl	80011a0 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	429a      	cmp	r2, r3
 800333a:	d21d      	bcs.n	8003378 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68da      	ldr	r2, [r3, #12]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800334a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	695a      	ldr	r2, [r3, #20]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f022 0201 	bic.w	r2, r2, #1
 800335a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2220      	movs	r2, #32
 8003360:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2220      	movs	r2, #32
 8003368:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8003374:	2303      	movs	r3, #3
 8003376:	e00f      	b.n	8003398 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	681a      	ldr	r2, [r3, #0]
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	4013      	ands	r3, r2
 8003382:	68ba      	ldr	r2, [r7, #8]
 8003384:	429a      	cmp	r2, r3
 8003386:	bf0c      	ite	eq
 8003388:	2301      	moveq	r3, #1
 800338a:	2300      	movne	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	461a      	mov	r2, r3
 8003390:	79fb      	ldrb	r3, [r7, #7]
 8003392:	429a      	cmp	r2, r3
 8003394:	d0c3      	beq.n	800331e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003396:	2300      	movs	r3, #0
}
 8003398:	4618      	mov	r0, r3
 800339a:	3710      	adds	r7, #16
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	430a      	orrs	r2, r1
 80033bc:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689a      	ldr	r2, [r3, #8]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	691b      	ldr	r3, [r3, #16]
 80033c6:	431a      	orrs	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69db      	ldr	r3, [r3, #28]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80033e0:	f023 030c 	bic.w	r3, r3, #12
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6812      	ldr	r2, [r2, #0]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	430b      	orrs	r3, r1
 80033ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	699a      	ldr	r2, [r3, #24]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a55      	ldr	r2, [pc, #340]	; (8003560 <UART_SetConfig+0x1c0>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d103      	bne.n	8003416 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800340e:	f7ff fe23 	bl	8003058 <HAL_RCC_GetPCLK2Freq>
 8003412:	60f8      	str	r0, [r7, #12]
 8003414:	e002      	b.n	800341c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003416:	f7ff fe0b 	bl	8003030 <HAL_RCC_GetPCLK1Freq>
 800341a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	69db      	ldr	r3, [r3, #28]
 8003420:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003424:	d14c      	bne.n	80034c0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003426:	68fa      	ldr	r2, [r7, #12]
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	009a      	lsls	r2, r3, #2
 8003430:	441a      	add	r2, r3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	005b      	lsls	r3, r3, #1
 8003438:	fbb2 f3f3 	udiv	r3, r2, r3
 800343c:	4a49      	ldr	r2, [pc, #292]	; (8003564 <UART_SetConfig+0x1c4>)
 800343e:	fba2 2303 	umull	r2, r3, r2, r3
 8003442:	095b      	lsrs	r3, r3, #5
 8003444:	0119      	lsls	r1, r3, #4
 8003446:	68fa      	ldr	r2, [r7, #12]
 8003448:	4613      	mov	r3, r2
 800344a:	009b      	lsls	r3, r3, #2
 800344c:	4413      	add	r3, r2
 800344e:	009a      	lsls	r2, r3, #2
 8003450:	441a      	add	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	005b      	lsls	r3, r3, #1
 8003458:	fbb2 f2f3 	udiv	r2, r2, r3
 800345c:	4b41      	ldr	r3, [pc, #260]	; (8003564 <UART_SetConfig+0x1c4>)
 800345e:	fba3 0302 	umull	r0, r3, r3, r2
 8003462:	095b      	lsrs	r3, r3, #5
 8003464:	2064      	movs	r0, #100	; 0x64
 8003466:	fb00 f303 	mul.w	r3, r0, r3
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	00db      	lsls	r3, r3, #3
 800346e:	3332      	adds	r3, #50	; 0x32
 8003470:	4a3c      	ldr	r2, [pc, #240]	; (8003564 <UART_SetConfig+0x1c4>)
 8003472:	fba2 2303 	umull	r2, r3, r2, r3
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	005b      	lsls	r3, r3, #1
 800347a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800347e:	4419      	add	r1, r3
 8003480:	68fa      	ldr	r2, [r7, #12]
 8003482:	4613      	mov	r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	4413      	add	r3, r2
 8003488:	009a      	lsls	r2, r3, #2
 800348a:	441a      	add	r2, r3
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	005b      	lsls	r3, r3, #1
 8003492:	fbb2 f2f3 	udiv	r2, r2, r3
 8003496:	4b33      	ldr	r3, [pc, #204]	; (8003564 <UART_SetConfig+0x1c4>)
 8003498:	fba3 0302 	umull	r0, r3, r3, r2
 800349c:	095b      	lsrs	r3, r3, #5
 800349e:	2064      	movs	r0, #100	; 0x64
 80034a0:	fb00 f303 	mul.w	r3, r0, r3
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	3332      	adds	r3, #50	; 0x32
 80034aa:	4a2e      	ldr	r2, [pc, #184]	; (8003564 <UART_SetConfig+0x1c4>)
 80034ac:	fba2 2303 	umull	r2, r3, r2, r3
 80034b0:	095b      	lsrs	r3, r3, #5
 80034b2:	f003 0207 	and.w	r2, r3, #7
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	440a      	add	r2, r1
 80034bc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80034be:	e04a      	b.n	8003556 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	4613      	mov	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	4413      	add	r3, r2
 80034c8:	009a      	lsls	r2, r3, #2
 80034ca:	441a      	add	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	009b      	lsls	r3, r3, #2
 80034d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80034d6:	4a23      	ldr	r2, [pc, #140]	; (8003564 <UART_SetConfig+0x1c4>)
 80034d8:	fba2 2303 	umull	r2, r3, r2, r3
 80034dc:	095b      	lsrs	r3, r3, #5
 80034de:	0119      	lsls	r1, r3, #4
 80034e0:	68fa      	ldr	r2, [r7, #12]
 80034e2:	4613      	mov	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	4413      	add	r3, r2
 80034e8:	009a      	lsls	r2, r3, #2
 80034ea:	441a      	add	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	fbb2 f2f3 	udiv	r2, r2, r3
 80034f6:	4b1b      	ldr	r3, [pc, #108]	; (8003564 <UART_SetConfig+0x1c4>)
 80034f8:	fba3 0302 	umull	r0, r3, r3, r2
 80034fc:	095b      	lsrs	r3, r3, #5
 80034fe:	2064      	movs	r0, #100	; 0x64
 8003500:	fb00 f303 	mul.w	r3, r0, r3
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	011b      	lsls	r3, r3, #4
 8003508:	3332      	adds	r3, #50	; 0x32
 800350a:	4a16      	ldr	r2, [pc, #88]	; (8003564 <UART_SetConfig+0x1c4>)
 800350c:	fba2 2303 	umull	r2, r3, r2, r3
 8003510:	095b      	lsrs	r3, r3, #5
 8003512:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003516:	4419      	add	r1, r3
 8003518:	68fa      	ldr	r2, [r7, #12]
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	009a      	lsls	r2, r3, #2
 8003522:	441a      	add	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	fbb2 f2f3 	udiv	r2, r2, r3
 800352e:	4b0d      	ldr	r3, [pc, #52]	; (8003564 <UART_SetConfig+0x1c4>)
 8003530:	fba3 0302 	umull	r0, r3, r3, r2
 8003534:	095b      	lsrs	r3, r3, #5
 8003536:	2064      	movs	r0, #100	; 0x64
 8003538:	fb00 f303 	mul.w	r3, r0, r3
 800353c:	1ad3      	subs	r3, r2, r3
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	3332      	adds	r3, #50	; 0x32
 8003542:	4a08      	ldr	r2, [pc, #32]	; (8003564 <UART_SetConfig+0x1c4>)
 8003544:	fba2 2303 	umull	r2, r3, r2, r3
 8003548:	095b      	lsrs	r3, r3, #5
 800354a:	f003 020f 	and.w	r2, r3, #15
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	440a      	add	r2, r1
 8003554:	609a      	str	r2, [r3, #8]
}
 8003556:	bf00      	nop
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40013800 	.word	0x40013800
 8003564:	51eb851f 	.word	0x51eb851f

08003568 <__libc_init_array>:
 8003568:	b570      	push	{r4, r5, r6, lr}
 800356a:	2600      	movs	r6, #0
 800356c:	4d0c      	ldr	r5, [pc, #48]	; (80035a0 <__libc_init_array+0x38>)
 800356e:	4c0d      	ldr	r4, [pc, #52]	; (80035a4 <__libc_init_array+0x3c>)
 8003570:	1b64      	subs	r4, r4, r5
 8003572:	10a4      	asrs	r4, r4, #2
 8003574:	42a6      	cmp	r6, r4
 8003576:	d109      	bne.n	800358c <__libc_init_array+0x24>
 8003578:	f000 f822 	bl	80035c0 <_init>
 800357c:	2600      	movs	r6, #0
 800357e:	4d0a      	ldr	r5, [pc, #40]	; (80035a8 <__libc_init_array+0x40>)
 8003580:	4c0a      	ldr	r4, [pc, #40]	; (80035ac <__libc_init_array+0x44>)
 8003582:	1b64      	subs	r4, r4, r5
 8003584:	10a4      	asrs	r4, r4, #2
 8003586:	42a6      	cmp	r6, r4
 8003588:	d105      	bne.n	8003596 <__libc_init_array+0x2e>
 800358a:	bd70      	pop	{r4, r5, r6, pc}
 800358c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003590:	4798      	blx	r3
 8003592:	3601      	adds	r6, #1
 8003594:	e7ee      	b.n	8003574 <__libc_init_array+0xc>
 8003596:	f855 3b04 	ldr.w	r3, [r5], #4
 800359a:	4798      	blx	r3
 800359c:	3601      	adds	r6, #1
 800359e:	e7f2      	b.n	8003586 <__libc_init_array+0x1e>
 80035a0:	08003694 	.word	0x08003694
 80035a4:	08003694 	.word	0x08003694
 80035a8:	08003694 	.word	0x08003694
 80035ac:	08003698 	.word	0x08003698

080035b0 <memset>:
 80035b0:	4603      	mov	r3, r0
 80035b2:	4402      	add	r2, r0
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d100      	bne.n	80035ba <memset+0xa>
 80035b8:	4770      	bx	lr
 80035ba:	f803 1b01 	strb.w	r1, [r3], #1
 80035be:	e7f9      	b.n	80035b4 <memset+0x4>

080035c0 <_init>:
 80035c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035c2:	bf00      	nop
 80035c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035c6:	bc08      	pop	{r3}
 80035c8:	469e      	mov	lr, r3
 80035ca:	4770      	bx	lr

080035cc <_fini>:
 80035cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035ce:	bf00      	nop
 80035d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80035d2:	bc08      	pop	{r3}
 80035d4:	469e      	mov	lr, r3
 80035d6:	4770      	bx	lr
